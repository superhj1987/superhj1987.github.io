<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | 后端技术杂谈]]></title>
  <link href="http://www.rowkey.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2022-06-01T13:59:01+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[Mr.H]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android异步加载图片]]></title>
    <link href="http://www.rowkey.me/blog/2013/05/02/android-image-load/"/>
    <updated>2013-05-02T12:02:50+00:00</updated>
    <id>http://www.rowkey.me/blog/2013/05/02/android-image-load</id>
    <content type="html"><![CDATA[<p>对于Android中的异步加载图片，自己总结了两种方式，如下：</p>

<p>1.<pre>
/<em>*
 * 异步读取图片，需要传递三个参数：Imageview imageView,String imagePath,int maxNumpixels<br/>
 * @author Bryant
 </em>/<br/>
public class AsyncLoadImage extends AsyncTask&lt;Object, Object, Void> {<br/>
    @Override<br/>
    protected Void doInBackground(Object&hellip; params) {</p>

<pre><code>    try {  
        ImageView imageView=(ImageView) params[0];  
        String path=(String) params[1];  
        int maxNumOfPixels = (Integer)params[2];

        Bitmap bm = CompressPicture.compress(path,maxNumOfPixels);

        publishProgress(new Object[] {imageView, bm});  
    }catch (Exception e) {  
        e.printStackTrace();  
    }  

    return null;
}  

protected void onProgressUpdate(Object... progress) {  
    ImageView imageView = (ImageView) progress[0];  
    Bitmap bm = (Bitmap) progress[1];
    if(bm != null){
        imageView.setImageBitmap(bm); 
    }

}  
</code></pre>

<p>}<br/>
</pre></p>

<ol>
<li></li>
</ol>


<pre>
/**
 * 图片异步加载
 * @author Bryant
 *
 */
public class AsyncImageLoader {
    private Map<String, SoftReference<Bitmap>> imageCache=new HashMap<String, SoftReference<Bitmap>>();
    private int maxNumPixels;
    
    public Bitmap loadBitmap(final String imagePath,int maxNumPixels,final ImageCallback callback){
        this.maxNumPixels = maxNumPixels;
        
        if(imageCache.containsKey(imagePath)){
            SoftReference<Bitmap> softReference=imageCache.get(imagePath);
            if(softReference.get()!=null){
                return softReference.get();
            }
        }
        final Handler handler=new Handler(){
            @Override
            public void handleMessage(Message msg) {
                callback.imageLoaded((Bitmap) msg.obj, imagePath);
            }
        };
        new Thread(){
            public void run() {
                Bitmap bitmap=loadImageFromPath(imagePath);
                imageCache.put(imagePath, new SoftReference<Bitmap>(bitmap));
                handler.sendMessage(handler.obtainMessage(0,bitmap));
            };
        }.start();
        return null;
    }
    
    protected Bitmap loadImageFromPath(String imagePath) {
        try {
            return CompressPicture.compress(imagePath, maxNumPixels);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public interface ImageCallback{
        public void imageLoaded(Bitmap imageBitmap,String imagePath);
    }
}
</pre>


<p>经过实际使用，AsyncImageLoader的效率比较高，但是调用比较麻烦。
调用示例：</p>

<pre>
private AsyncImageLoader imageLoader = new AsyncImageLoader();
imageLoader.loadBitmap(imagePath,maxNumPixels, new ImageCallback() {
    public void imageLoaded(Bitmap imageBitmap, String imagePath) {
        imageView.setImageBitmap(imageBitmap);
    }
}); 
</pre>


<p>AsyncLoadImage调用较简单，调用示例如下：</p>

<pre>
new AsyncLoadImage().execute(new Object[]{imageView,imagePath,maxNumPixels});
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中dip、dp、sp、pt和px的区别]]></title>
    <link href="http://www.rowkey.me/blog/2011/08/05/android-dip-sp/"/>
    <updated>2011-08-05T13:39:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2011/08/05/android-dip-sp</id>
    <content type="html"><![CDATA[<p>Android有以下几个度量单位：</p>

<ul>
<li><p> dip: device independent pixels(设备独立像素). 不同设备有不同的显示效果,这个和设备硬件有关，一般我们为了支持WVGA、HVGA和QVGA 推荐使用这个，不依赖像素。</p></li>
<li><p> px: pixels(像素). 不同设备显示效果相同，一般我们HVGA代表320x480像素，这个用的比较多。</p></li>
<li><p> pt: point，是一个标准的长度单位，1pt＝1/72英寸，用于印刷业，非常简单易用；</p></li>
<li><p> sp: scaled pixels(放大像素). 主要用于字体显示best for textsize。</p></li>
</ul>


<p>由此，根据 google 的建议，TextView 的字号最好使用 sp 做单位，而且查看TextView的源码可知Android默认使用sp作为字号单位。</p>

<p>关于换算（以 sp 和 pt 为例）
查看　TextView 等类的源码，可知：</p>

<pre>
case COMPLEX_UNIT_PX: 
      return value; 
case COMPLEX_UNIT_SP: 
      return value * metrics.scaledDensity; 
case COMPLEX_UNIT_PT: 
      return value * metrics.xdpi * (1.0f/72); 

－－－－－－－－－－－－－－－－－－－－－－－－－－ 
scaledDensity = DENSITY_DEVICE / (float) DENSITY_DEFAULT; 
xdpi = DENSITY_DEVICE; 

－－－－－－－－－－－－－－－－－－－－－－－－－－ 
DENSITY_DEFAULT = DENSITY_MEDIUM = 160; 

============================================ 
</pre>


<p>   所以： 假设　pt 和 sp 取相同的值 1，则可设 1pt 和 1sp 之间系数为 x，</p>

<pre>
1 * DENSITY_DEVICE / 72 = x * 1 * DENSITY_DEVICE / 160  =&gt; 
x = 160 / 72 = 2.2222 
</pre>


<p>也就是说在 Android 中，  1pt 大概等于 2.22sp</p>

<p>以上供参考，如果 UI 能够以 sp 为单位提供设计是最好的，如果设计中没有 sp
的概念，则开发人员也可以通过适当的换算取近似值。</p>

<p>   过去，程序员通常以像素为单位设计计算机用户界面。例如，定义一个宽度为300像素的表单字段，列之间的间距为5个像素，图标大小为16×16像素 等。这样处理的问题在于，如果在一个每英寸点数（dpi）更高的新显示器上运行该程序，则用户界面会显得很小。在有些情况下，用户界面可能会小到难以看清 内容。</p>

<p>与分辨率无关的度量单位可以解决这一问题。Android支持下列所有单位。</p>

<ul>
<li><p>px（像素）：屏幕上的点。</p></li>
<li><p>in（英寸）：长度单位。</p></li>
<li><p>mm（毫米）：长度单位。</p></li>
<li><p>pt（磅）：1/72英寸。</p></li>
<li><p>dp（与密度无关的像素）：一种基于屏幕密度的抽象单位。在每英寸160点的显示器上，1dp = 1px。</p></li>
<li><p>dip：与dp相同，多用于android/ophone示例中。</p></li>
<li><p>sp（与刻度无关的像素）：与dp类似，但是可以根据用户的字体大小首选项进行缩放。</p></li>
</ul>


<p>为了使用户界面能够在现在和将来的显示器类型上正常显示，建议大家始终使用sp作为文字大小的单位，将dip作为其他元素的单位。当然，也可以考虑使用矢量图形，而不是用位图。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多activity中退出整个程序]]></title>
    <link href="http://www.rowkey.me/blog/2011/05/30/android-exit-multi-activity/"/>
    <updated>2011-05-30T13:39:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2011/05/30/android-exit-multi-activity</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>多activity中退出整个程序，例如从A->B->C->D，这时我需要从D直接退出程序。</p>

<h2>网上资料</h2>

<p>finish()和system(0)都只能退出单个activity。杀进程等的等方式都不行~~~</p>

<h2>解决问题</h2>

<p>我们知道Android的窗口类提供了历史栈，我们可以通过stack的原理来巧妙的实现，这里我们在D窗口打开A窗口时在Intent中直接加入标志Intent.FLAG_ACTIVITY_CLEAR_TOP，再次开启A时将会清除该进程空间的所有Activity。</p>

<p>在D中使用下面的代码:</p>

<pre>
Intent intent = new Intent(); 
intent.setClass(D.this, A.class);
intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  //注意本行的FLAG设置
startActivity(intent);
finish();//关掉自己
</pre>


<p>在A中加入代码：</p>

<pre>
@Override
protected void onNewIntent(Intent intent) {
// TODO Auto-generated method stub
super.onNewIntent(intent);
//退出
        if ((Intent.FLAG_ACTIVITY_CLEAR_TOP & intent.getFlags()) != 0) {
finish();
}
}
</pre>


<p>A的Manifest.xml配置成android:launchMode=&ldquo;singleTop&rdquo;</p>

<h2>原理总结</h2>

<p>一般A是程序的入口点，从D起一个A的activity，加入标识Intent.FLAG_ACTIVITY_CLEAR_TOP这个过程中会把栈中B，C，都清理掉。因为A是android:launchMode=&ldquo;singleTop&rdquo;
不会调用oncreate(),而是响应onNewIntent（）这时候判断Intent.FLAG_ACTIVITY_CLEAR_TOP，然后把A finish（）掉。
栈中A,B,C,D全部被清理。所以整个程序退出了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的intent调用代码总结]]></title>
    <link href="http://www.rowkey.me/blog/2011/02/08/android-intent/"/>
    <updated>2011-02-08T13:39:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2011/02/08/android-intent</id>
    <content type="html"><![CDATA[<h3>显示Web网页</h3>

<pre><code>Uri uri = Uri.parse("http://www.android123.com.cn");
Intent it = new Intent(Intent.ACTION_VIEW,uri);
startActivity(it);
</code></pre>

<h3>显示Google地图</h3>

<pre><code>Uri uri = Uri.parse("geo:38.899533,-77.036476");
Intent it = new Intent(Intent.Action_VIEW,uri);
startActivity(it);
</code></pre>

<h3>Maps路径规划</h3>

<pre><code>Uri uri = Uri.parse("http://maps.google.com/maps?f=d&amp;saddr=startLat%20startLng&amp;daddr=endLat%20endLng&amp;hl=en");
Intent it = new Intent(Intent.ACTION_VIEW,URI);
startActivity(it);
</code></pre>

<h3>拨打电话</h3>

<pre><code>Uri uri = Uri.parse("tel:xxxxxx");
Intent it = new Intent(Intent.ACTION_DIAL, uri);   
startActivity(it);  

Uri uri = Uri.parse("tel.xxxxxx");
Intent it =new Intent(Intent.ACTION_CALL,uri);
</code></pre>

<p>注意需要权限android.permission.CALL_PHONE</p>

<h3>发送SMS/MMS</h3>

<pre><code>Intent it = new Intent(Intent.ACTION_VIEW);
it.putExtra("sms_body", "android开发网欢迎您");
it.setType("vnd.android-dir/mms-sms");
startActivity(it);  
</code></pre>

<h3>发送短信</h3>

<pre><code>Uri uri = Uri.parse("smsto:10086");
Intent it = new Intent(Intent.ACTION_SENDTO, uri);
it.putExtra("sms_body", "10086"); //正文为10086
startActivity(it);  
</code></pre>

<h3>发送彩信</h3>

<pre><code>Uri uri = Uri.parse("content://media/external/images/media/10"); //该Uri根据实际情况修改，external代表外部存储即sdcard
Intent it = new Intent(Intent.ACTION_SEND);
it.putExtra("sms_body", "android123.com.cn"); 
it.putExtra(Intent.EXTRA_STREAM, uri);
it.setType("image/png");
startActivity(it);
</code></pre>

<h3>发送Email</h3>

<pre><code>Uri uri = Uri.parse("mailto:android123@163.com");
Intent it = new Intent(Intent.ACTION_SENDTO, uri);
startActivity(it);

Intent it = new Intent(Intent.ACTION_SEND);
it.putExtra(Intent.EXTRA_EMAIL, "android123@163.com");
it.putExtra(Intent.EXTRA_TEXT, "android开发网测试");
it.setType("text/plain");
startActivity(Intent.createChooser(it, "选择一个Email客户端"));  

Intent it=new Intent(Intent.ACTION_SEND);   
String[] tos={"android123@163.com"};     //发送到 
String[] ccs={"ophone123@163.com"};    //抄送
it.putExtra(Intent.EXTRA_EMAIL, tos);   
it.putExtra(Intent.EXTRA_CC, ccs);   
it.putExtra(Intent.EXTRA_TEXT, "正文");   
it.putExtra(Intent.EXTRA_SUBJECT, "标题");   
it.setType("message/rfc822");    //编码类型
startActivity(Intent.createChooser(it, "选择一个Email客户端"));
</code></pre>

<h3>Email添加附件</h3>

<pre><code>Intent it = new Intent(Intent.ACTION_SEND);
it.putExtra(Intent.EXTRA_SUBJECT, "正文");
it.putExtra(Intent.EXTRA_STREAM, "file:///sdcard/nobody.mp3"); //附件为sd卡上的nobody MP3文件
sendIntent.setType("audio/mp3");
startActivity(Intent.createChooser(it, "选择一个Email客户端"));
</code></pre>

<h3>播放多媒体</h3>

<pre><code>Intent it = new Intent(Intent.ACTION_VIEW);
Uri uri = Uri.parse("file:///sdcard/nobody.mp3");
it.setDataAndType(uri, "audio/mp3");
startActivity(it);

Uri uri = Uri.withAppendedPath(MediaStore.Audio.Media.INTERNAL_CONTENT_URI, "1"); //从系统内部的MediaProvider索引中调用播放
Intent it = new Intent(Intent.ACTION_VIEW, uri);
startActivity(it);  
</code></pre>

<h3>Uninstall卸载程序</h3>

<pre><code>Uri uri = Uri.fromParts("package", packageName, null); //packageName为包名，比如com.android123.apkInstaller
Intent it = new Intent(Intent.ACTION_DELETE, uri);
startActivity(it);
</code></pre>

<h3>进入联系人界面</h3>

<pre><code>Intent intent = new Intent();
intent.setAction(Intent.ACTION_VIEW);
intent.setData(People.CONTENT_URI);
startActivity(intent);
</code></pre>

<p>查看某个联系人，当然这里是ACTION_VIEW，如果为选择并返回action改为ACTION_PICK，当然处理intent时返回需要用到startActivityforResult</p>

<pre><code>Uri personUri = ContentUris.withAppendedId(People.CONTENT_URI, ID);//最后的ID参数为联系人Provider中的数据库BaseID，即哪一行
Intent intent = new Intent();
intent.setAction(Intent.ACTION_VIEW);
intent.setData(personUri);
startActivity(intent);
</code></pre>

<h3>选择一个图片</h3>

<pre><code>Intent intent = new Intent(Intent.ACTION_GET_CONTENT);  
intent.addCategory(Intent.CATEGORY_OPENABLE);  
intent.setType("image/*");//此处-&gt;audio/*对应选择音频 video/*对应选择视频
startActivityForResult(intent, 0);
</code></pre>

<h3>调用Android设备的照相机，并设置拍照后存放位置</h3>

<pre><code>Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);  
intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(new File(Environment.getExternalStorageDirectory().getAbsolutePath()+"/cwj", android123 + ".jpg"))); //存放位置为sdcard卡上cwj文件夹，文件名为android123.jpg格式
startActivityForResult(intent, 0);
</code></pre>

<h3>搜索指定package name在market上</h3>

<pre><code>Uri uri = Uri.parse("market://search?q=pname:com.android123.cwj");   
Intent intent = new Intent(Intent.ACTION_VIEW, uri);   
startActivity(intent); 
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android位图总结]]></title>
    <link href="http://www.rowkey.me/blog/2010/12/18/android-bitmap/"/>
    <updated>2010-12-18T13:39:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2010/12/18/android-bitmap</id>
    <content type="html"><![CDATA[<p>由于项目中牵扯到了对位图(android.graphics.Bitmap)的操作，于是对照Android的参考文档详细地研究了一下Android提供的位图相关功能。</p>

<h2>一、对位图的获取</h2>

<p>在Android的SDK中提供了一个BitmapFactory 类。采用此类的几个方法能够从一个文件路径或者输入流中得到位图。</p>

<ul>
<li>包：android.graphics</li>
<li>类：BitmapFactory</li>
<li>Android SDK中的简介：Creates Bitmap objects from various sources, including files, streams, and byte-arrays.</li>
</ul>


<p>此类其提供了以下方法来获取Bitmap，这些方法都是静态的:</p>

<ol>
<li>decodeByteArray(byte[] data, int offset, int length)从一个字节数组中得到数据转换为位图。</li>
<li>decodeFile(String pathName)由一个图像文件路径的得到位图（支持jpg、png、bmp格式）</li>
<li>decodeFileDescriptor(FileDescriptor fd)由一个文件描述符得到位图。</li>
<li>decodeResource(Resources res, int id)由资源ID获取位图</li>
<li>decodeStream(InputStream is)由图片输入流获取位图。</li>
</ol>


<p>这里，由于Android系统本身对apk程序的限制，当加载大图片时会产生OutOfMemoryError。可以采取两种办法解决：</p>

<ul>
<li>先使用android.provider.MediaStore.Images.Media类的query(ContentResolver cr, Uri uri, String[] projection, String where, String orderBy)方法获得对应的图片所对应的id，然后使用android.provider.MediaStore.Images.Thumbnails类的queryMiniThumbnail(ContentResolver cr, long origId, int kind, String[] projection)获得图片对应的缩略图的路径，再使用BitmapFactory的decodeFile(String pathname)获取到图片的缩略图，这样即可避免内存溢出的发生。</li>
<li>采取压缩图片的方法对图片进行压缩。这里主要还是使用BitmapFactory类，对于上面提到过的能够获取位图的几个方法，都对应着另一个多了一个参数的方法，例如decodeFile(String pathName)对应着decodeFile(String pathName, BitmapFactory.Options opts)这个方法，其他的可查阅参考文档。其中，通过引入opts这个参数，对其进行相关的设置，最后能得到一个被压缩的图片。</li>
</ul>


<h2>二、对位图信息的获取</h2>

<p>要获取位图信息，比如位图大小、是否包含透明度、颜色格式等，获取得到Bitmap就迎刃而解了，这些信息在Bitmap的函数中可以轻松获取到。</p>

<p>Android SDK中对Bitmap有详细说明，这里辅助说明以下2点：</p>

<ol>
<li>在Bitmap中对RGB颜色格式使用Bitmap.Config定义，仅包括ALPHA_8、ARGB_4444、ARGB_8888、RGB_565，缺少了一些其他的，比如说RGB_555，在开发中可能需要注意这个小问题；</li>
<li>Bitmap还提供了compress()接口来压缩图片，不过Android SDK只支持PNG、JPG格式的压缩；其他格式的需要Android开发人员自己补充了。</li>
</ol>


<h2>三、位图的显示</h2>

<p>位图的显示，一般可以在界面中放置ImageView控件，然后调用android.widget.ImageView类的setImageBitmap(Bitmap bm)方法将位图显示出来。另外，可以使用核心类android.graphics.Canvas的drawBirmap()方法显示位图，或者借助于BitmapDrawable来将Bitmap绘制到Canvas。</p>

<h2>四、位图的缩放</h2>

<p>位图的缩放，在Android SDK中提供了2种方法：</p>

<ol>
<li>将一个位图按照需求重画一遍，画后的位图就是我们需要的了，与位图的显示几乎一样：drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint)</li>
<li>在原有位图的基础上，缩放原位图，创建一个新的位图： createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)
归结到底，位图缩放的本质就是将原始位图按照需求显示出来，创造一张新的位图。</li>
</ol>


<h2>五、位图的旋转</h2>

<p>位图的旋转，离不开Matrix。Matrix在线性代数中都学习过，Android SDK提供了Matrix类，可以通过各种接口来设置矩阵。例子如下“</p>

<pre>
Matrix matrix = new Matrix();matrix.setRotate(90,120,130);canvas.drawBitmap(mbmpTest, matrix, mPaint);
</pre>


<p>除了这种方法之外，我们也可以在使用Bitmap提供的函数如下：</p>

<pre>
public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)
</pre>


<p>在原有位图旋转的基础上，创建新位图。</p>

<h2>六、位图的截取</h2>

<p>对于位图的规则形状如矩形的截取，很容易通过Matrix进行实现。例子如下：</p>

<pre>
Bitmap croppedImage;
// 取得裁剪的矩形
Rect r = mCrop.getCropRect(); 
if(r == null) return;
int width = r.width();
int height = r.height();
// 生成裁剪的图片
croppedImage = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(croppedImage);
Rect dstRect = new Rect(0, 0, width, height);
canvas.drawBitmap(mBitmap, r, dstRect, null);
</pre>


<p>而对于位图的不规则形状的截取，找不到很好的解决办法。曾想过直接对像素进行操作，最终因为算法的的复杂而放弃。一次偶然的机会，在阅读一篇博文时，我发现了使用android.graphics.Canvas的clipPath方法不仅仅可以达到高亮显示路径的目的，也能够达到任意形状截取图片的目的，从而解决了此问题。</p>

<p>以上就是对Android的位图功能进行的总结，以及一些自己实践中得出的想法和结论。更深入的内容需要仔细地去阅读研究Android SDK文档并付之于实践。</p>
]]></content>
  </entry>
  
</feed>
