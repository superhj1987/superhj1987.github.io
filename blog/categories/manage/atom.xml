<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: manage | 后端技术杂谈 | 飒然Hang]]></title>
  <link href="http://www.rowkey.me/blog/categories/manage/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2021-02-04T13:14:44+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[飒然Hang]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[研发效能杂谈]]></title>
    <link href="http://www.rowkey.me/blog/2020/08/13/dev-efficacy-talk/"/>
    <updated>2020-08-13T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/08/13/dev-efficacy-talk</id>
    <content type="html"><![CDATA[<p>研发效能是什么？为什么现在都在谈如何提高研发效能？研发效能对于一个企业到底有多重要？本文按照Why、What、How三步走沉淀梳理了研发效能相关的知识点。</p>

<!--more-->


<h2>一. 为什么要提升研发效能</h2>

<ul>
<li>传统的职能部门组织架构带来的效率竖井问题</li>
<li>人力的增加没有让项目进度加快</li>
<li>长久加班导致团队士气低落，后续的效率降低</li>
<li>上线前加班、熬夜，压力大</li>
<li>上线后Bug、事故频发，实现效果与需求不匹配</li>
<li>各种重复低效工作，疲于应付业务</li>
<li>想要有限的人力做更多的产出</li>
</ul>


<h2>二. 什么是研发效能</h2>

<p>对于一个企业来说，追求的是企业效能的最大化，包括：利润、用户规模、客户满意度、运营效率等。而对于需要研发自有产品的互联网公司来说，研发效能则是服务于企业效能的至关重要的因素。</p>

<p>一个软件研发的完整流程如下图所示：</p>

<p><img src="//post_images/dev/devprocess.png" alt="" /></p>

<p>此流程交付期望产品的效率和能力，即研发效能。更进一步的《研发效率破局之道》中将研发效能定义为团队能够持续地为用户产生有效价值的效率，包括 <strong>有效性（Effectiveness）、效率（Efficiency）和可持续性（Sustainability）</strong> 三个方面。其增加的可持续性指出研发效能应该着眼于长期效果。</p>

<p>一句话来讲，研发效能就是持续快速交付价值的能力。</p>

<h2>三. 如何提升研发效能</h2>

<p>对应于第一部分中讲述的软件开发流程，如果想要提升研发效能，那么需要落实到研发流程（组织结构、项目管理、持续交付）、工程方法、个人效能以管理和文化的实践上。本文重点从研发流程、工程方法两方面来讲。</p>

<p><img src="http://www.rowkey.me/post_images/dev/whole.png" width="800"/></p>

<h3>3.1 衡量指标</h3>

<p>评估一个组织持续快速交付价值的能力，需要一组可量化的数据或参数，用来跟踪和评估开发过程的“健康”状况。</p>

<h4>3.1.1 指标分类</h4>

<ul>
<li>持续发布能力

<ul>
<li>发布频率：单位时间内的有效发布次数</li>
<li>发布前置时间：从代码提交到功能上线花费的时间</li>
</ul>
</li>
<li>需求响应周期

<ul>
<li>交付周期时间：从确认用户提出的需求开始，到需求上线经历的平均时长。</li>
<li>开发周期时间：从开发团队理解需求开始，到需求可以上线所经历的平均时长。</li>
</ul>
</li>
<li>交付吞吐率

<ul>
<li>单位时间交付用户需求数量：单个团队的对比</li>
</ul>
</li>
<li>交付过程质量：质量内建

<ul>
<li>缺陷创建和修复时间分布：缺陷能够持续和及时地被发现，并在发现后尽快修复。</li>
<li>缺陷库存：开发过程控制缺陷库存量，让产品始终处于接近可发布状态，是持续交付的基础</li>
</ul>
</li>
<li>交付质量：系统的可用性

<ul>
<li>单位时间问题数目</li>
<li>线上问题解决时长</li>
</ul>
</li>
</ul>


<h4>3.1.2 通用目标</h4>

<ul>
<li>2：2周交付周期。从想法提出并确认到上线的时间。【跨职能、组织的协调一致和紧密协作】</li>
<li>1：1周开发周期。从需求设计完成（对开发就绪）到达到可上线的时间。【需求的拆分和管理，开发团队的分工协作模式，持续交付实践】</li>
<li>1：1小时的发布前置时间。代码提交后可以在1小时内完成发布。【持续交付流水线】</li>
</ul>


<h4>3.1.3 选择优化指标</h4>

<p>流程中总是有一个核心瓶颈。分析关键路径、定位瓶颈，针对优化</p>

<ul>
<li>使用指标来发现问题而不是做绩效考核</li>
<li>使用指标来检验优化效果</li>
<li>使用价值流图/累积流程图发现全局瓶颈，从而确定需要提升的度量指标</li>
</ul>


<h3>3.2 组织结构&amp;&amp;项目管理</h3>

<h4>3.2.1 组织结构</h4>

<p>避免“效率竖井”： 采用以业务为单位的组织架构，保证业务线全栈配齐，目标一致。并从全局定位瓶颈进而进行优化工作。</p>

<h4>3.2.2 项目管理</h4>

<p>使用敏捷开发来提升研发效率</p>

<ul>
<li>敏捷 = 价值观 + 原则 + 一系列符合价值观和原则的方法。

<ul>
<li>软件应该一直处于可工作状态</li>
<li>每个迭代都能将软件部署到一个类生产环境中，并向用户演示</li>
<li>迭代长度不超过两周</li>
<li>透明性、协作性、纪律性和持续改进</li>
</ul>
</li>
<li>使用MVP，度量驱动开发</li>
<li>流程尽快流动：工程方法支撑</li>
<li>发现整个流程中的瓶颈，并解决：可视化工作流、事故复盘</li>
<li>避免“小瀑布”

<ul>
<li>价值排序</li>
<li>满足客户需要</li>
<li>需求拆分成能够独立测试的需求！！！</li>
</ul>
</li>
<li>看板

<ul>
<li>从个人转变到关注价值流动：待开发->设计->开发->开发自测->代码评审->测试->完成</li>
<li>明确的“完成的定义”DoD，明确了状态迁移必须完成的活动</li>
</ul>
</li>
<li>从实际出发、以终为始：以实用主义的态度，从原则出发，灵活优化流程</li>
</ul>


<p>一个可供参考的项目管理标准动作可见：<a href="https://www.rowkey.cn/blog/2020/07/31/project-manage/">项目管理标准模板</a></p>

<h3>3.3 持续交付</h3>

<p>持续交付指的是在短周期内完成软件产品，以保证软件保持在随时可以发布的状态。让每一个变更都经过一条自动化的检验流水线，来检查每一个变更的质量，通过就进入下一个阶段。<strong>其不是一种工具，而是一种实践！</strong></p>

<ul>
<li><strong>不要阻塞开发人员</strong></li>
<li>每个团队指定构建负责人或者发布工程师：优化交付流水线，提升交付效率</li>
<li>项目状态，应该对参与整个过程（包括构建、部署、测试和发布）的所有人都是可见的</li>
<li>风险管理

<ul>
<li><strong>迭代增量式交付</strong>是有效风险管理的关键</li>
<li>手工测试环境、试运行环境和生产环境总是需要严格的访问控制</li>
<li>让风险识别成为每日立会的一部分</li>
</ul>
</li>
<li>审计

<ul>
<li>手工测试环境、试运行环境和生产环境总是需要严格的访问控制：指定谁能够访问“特权”环境。</li>
<li>要求每次部署都要进行审计，以确切知道到底修改了哪些内容。</li>
<li>文档自动化、自文档</li>
</ul>
</li>
</ul>


<p>具体可见：<a href="https://www.rowkey.cn/blog/2020/06/15/cd/">持续交付这点事</a></p>

<h3>3.3 工程方法</h3>

<h4>3.3.1 技术债</h4>

<p>在开发产品或者功能的过程中，没有使用最佳的实现方法而引入的技术问题。需要持续关注业务和技术债。对业务机会敏感，敢放手一搏大量借贷，也知道什么时候必须偿还技术债。</p>

<ul>
<li>利用技术债的好处，必要时要大胆“举债前行”</li>
<li>控制技术债，在适当的时候偿还适当部分的技术债。</li>
</ul>


<h4>3.4.2 云计算</h4>

<p>利用好云计算带来的<strong>服务化、自助化和弹性伸缩</strong>三大优势。初创公司在业务刚起步时，使用 SaaS 或者 PaaS 快速开发业务；业务成长到一定规模之后，再逐步转到 IaaS 以及私有云降低成本。</p>

<ul>
<li>细节抽象得越多，云服务商负责的部分就越多，我们就越能够聚焦自己的业务，从而提高研发效能</li>
<li>使用云资源时，通过工具或者 API 调用来完成工作，减少人工参与，达到自动化</li>
<li>资源共享、弹性伸缩</li>
<li>容器：不可变基础设施；基于K8S建设PaaS</li>
</ul>


<p>在使用云计算时，要妥善处理它带来的挑战，比如分布式系统带来的安全和控制方面的问题。</p>

<ul>
<li>自治和集中管理相结合：信息可视化（系统整体的质量看板、调用链追踪）</li>
<li>错误处理</li>
</ul>


<h4>3.4.3 测试机制</h4>

<p>上文持续交付一部分中最关键的其实就是测试部分，只有具有完善、可靠的测试机制，才能保证研发质量和交付效果，才能从根本上提高研发效能。</p>

<ul>
<li>测试左移：质量内建，即持续交付中的测试机制。

<ul>
<li>按照功能的维度管理团队，让整个功能团队对产品负责；改变团队成员对测试工作的认知</li>
<li>把测试添加到开发和产品需求步骤中</li>
<li>频繁测试，快速测试：提升测试运行的速度，并行运行、提高构建速度、精准测试、分层测试、减少不必要的用例</li>
</ul>
</li>
<li>测试右移

<ul>
<li>利用线上的真实环境测试：需要有完备的数据隔离机制</li>
<li>测试人员介入线上监控和预警，及时发现问题并跟进解决</li>
<li>混沌工程：即在真实环境中通过模拟各种不可预期的故障来验证系统稳定性</li>
</ul>
</li>
</ul>


<h4>3.4.4 平台化</h4>

<p>通过抽象共性组件、功能，达到代码、功能复用，从而减少重复开发，提高研发效能。</p>

<ul>
<li>技术平台：技术设施的复用</li>
<li>数据中台：数据沉淀和输出能力</li>
<li>移动中台：前端组件、跨平台开发、插件化、热加载</li>
<li>业务中台

<ul>
<li>业务能力的复用</li>
<li>赋能业务</li>
</ul>
</li>
</ul>


<p>相关资料可见：<a href="https://www.rowkey.cn/blog/2019/11/23/middle-talk/">中台简谈</a></p>

<h3>3.5 个人效能</h3>

<p>如何提高开发人员自身的开发效率，除了每个人自身的天赋能力外，也有一些可以刻意使用的高效工具和方法。</p>

<ul>
<li>高效工作方法

<ul>
<li>抽象和分而治之</li>
<li>快速迭代</li>
<li>DRY</li>
<li>番茄工作法</li>
</ul>
</li>
<li>高效开发工具

<ul>
<li>好的IDE</li>
<li>操作系统快捷键</li>
<li>思维导图软件</li>
<li>学习笔记软件</li>
<li>文档撰写工具</li>
</ul>
</li>
<li>持续学习：不断地学习新的开发技能，从而提升自己的开发效率</li>
</ul>


<p>此外，还可以通过技术管理从外部驱动个人效能的提升，这在下面的技术管理部分会讲。</p>

<h3>3.6 管理和文化</h3>

<h4>3.6.1 技术管理</h4>

<p>管理包括：看方向、管人、管事。做好技术管理是提高研发效能的关键部分。其中，3.4节个人效能部分的数字驱动也是技术管理的一部分。主要步骤包括：</p>

<ul>
<li>制定目标：兼顾业务目标和技术目标</li>
<li>目标管理：使用OKR等目标管理方案</li>
<li>计划并执行去实现目标</li>
</ul>


<p>此外，技术管理中一个很难的问题是如何进行考核。这里可以使用数字化的方式，以驱动个人效能的提升。</p>

<ul>
<li>选择个人效能度量指标</li>
<li>根据代码提交日志自动生成工作日报和周报、个人贡献值</li>
<li>综合多维数据构建个人的数据画像

<ul>
<li>社会地位：用排名、榜单来实现；</li>
<li>工作本身：用复合型报告去综合评价，告知员工究竟做得好不好</li>
<li>自我改变：通过雷达图，进行多维度的数据分析，精准提炼员工的优点与不足，员工可以有针对性的取长补短。</li>
</ul>
</li>
</ul>


<p>需要说明的是，如果指标不能全方面的衡量，就不要做为考核指标，仅仅用于发现问题，解决问题！</p>

<p>一个可参考的技术管理标准动作模板见：<a href="https://www.rowkey.cn/blog/2020/04/25/tech-leader-manage/">技术管理标准模板</a></p>

<h4>3.6.2 团队文化</h4>

<p>团队文化是团队成员共同认可的价值观和行为准则，良好且有效的文化是保障团队高效产出的关键部分。很多互联网公司都是工程师文化主导的，包括Facebook、Google、百度等。他们也都具有自己独特的企业文化价值观，如百度的简单可依赖、谷歌的不作恶、Netflix的自由和责任。建立团队文化的步骤如下：</p>

<ul>
<li>定义：总结、明确自己团队的文化，提炼出简单易记的文字。</li>
<li>主张：各种形式的传播。从我自己的经历来看，不断地念经是其中最有效的方式。</li>
<li>追求：在奖惩中体现出文化价值观的作用。如对于文化价值观贯彻优秀的同学给与公开的肯定与奖励。</li>
</ul>


<h2>四. 参考资料</h2>

<ul>
<li><a href="https://book.douban.com/subject/6862062/">《持续交付》</a></li>
<li><a href="https://book.douban.com/subject/30419555/">《持续交付2.0》</a></li>
<li><a href="https://time.geekbang.org/column/intro/100034501">《研发效率破局之道》</a></li>
<li><a href="https://developer.aliyun.com/article/690725">如何衡量研发效能？阿里资深技术专家提出了5组指标</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目管理标准模板]]></title>
    <link href="http://www.rowkey.me/blog/2020/07/31/project-manage/"/>
    <updated>2020-07-31T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/07/31/project-manage</id>
    <content type="html"><![CDATA[<p>之前写了一篇<a href="https://www.rowkey.cn/blog/2020/04/25/tech-leader-manage/">《技术管理标准模板》</a>，其中项目管理部分并没有具体深入，而这一技能不仅仅是对于技术Leader的要求，从我的经验看来，只要是程序员，具有项目管理能力都是如虎添翼的，即使你走的是专业路线。本文即基于自己的经验，从项目的启动和迭代阶段总结了敏捷项目管理的一些标准动作。</p>

<!--more-->


<h2>启动阶段</h2>

<ul>
<li><p>相关干系人沟通，同步项目背景、业务价值等</p></li>
<li><p>启动会议：召集相关干系人，明确业务相关信息，确定相关流程制度等</p></li>
<li><p>需求收集和分析-><strong>总体需求文档</strong>，概括性的功能与非功能需求列表</p></li>
<li><p>初步的产品规划-><strong>每一轮迭代的需求列表、发布时间</strong></p></li>
<li><p>创建项目基础设施-><strong>可持续交付到测试环境的基础项目</strong>，包括各个端的代码库、到测试环境的流水线等。</p></li>
</ul>


<h2>迭代阶段</h2>

<p>两周为一迭代，包括需求、设计、开发、测试、发布。关键点在于需求的拆分、优先级以及并行化。</p>

<h3>1. 需求评审</h3>

<p>对本轮迭代的需求尽心评审确认。</p>

<p><strong>前置条件</strong>：产品经理对此轮迭代进行需求确认，产出需求条目，按<strong>优先级</strong>排列；需求需要拆的足够小，把大需求拆成一个个<strong>能够独立开发测试发布</strong>的小需求</p>

<h3>2. 工作规划</h3>

<p>根据本轮迭代需求做WBS任务分解</p>

<ul>
<li><p>WBS工作项分解: 甘特图</p></li>
<li><p>里程碑结点: 表格或者里程碑图</p></li>
<li><p>风险管理：风险点预估、严重程度、可能性、应对措施</p></li>
</ul>


<h3>3. 设计/技术评审</h3>

<p>分别对交互设计和技术设计进行评审</p>

<p><strong>前置条件</strong>：设计师需要输出设计图；技术部分做概要设计和系统设计，随着每一轮迭代进行更新维护</p>

<h3>4. 测试用例评审</h3>

<p>由QA安排，会前需要提前将测试用例文档发给产品经理与研发，提前标注有疑问的用例。</p>

<h3>5. 开发、测试过程的监控</h3>

<p>持续交付：开发和迭代测试，需求开发完成后即测试并进行缺陷跟踪。</p>

<p><strong>会议</strong></p>

<ul>
<li><p>每日站会：全员站会，了解整体状况，对暴露出的风险和问题作出集体决策。</p></li>
<li><p>项目周会：10人以上团队。解决整体计划层面、跨团队协同配合的问题。</p></li>
</ul>


<p><strong>项目周报</strong></p>

<p>汇总项目总体状况，回答三个问题</p>

<ul>
<li><p>项目的整体进展状态到底如何？</p></li>
<li><p>风险可控吗？</p></li>
<li><p>目标达成有没有问题？</p></li>
</ul>


<h3>6. 版本全量测试</h3>

<p>对所有已经开发完的功能进行交叉测试、全量测试、埋点测试、回归测试、第三方云测。</p>

<h3>7. 验包发布</h3>

<p>此迭代所有功能开发测试完成后，提交审核流程，各流程审核人验收通过后发布。</p>

<h3>8. 复盘</h3>

<p>项目复盘会：有意识地向过去的行为经验学习</p>

<ul>
<li><p>团队做对了哪些事？</p></li>
<li><p>做错了哪些事？</p></li>
<li><p>再来一次，如何做得更好？</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续交付这点事]]></title>
    <link href="http://www.rowkey.me/blog/2020/06/15/cd/"/>
    <updated>2020-06-15T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/06/15/cd</id>
    <content type="html"><![CDATA[<p>持续交付指的是在短周期内完成软件产品，以保证软件保持在随时可以发布的状态。让每一个变更都经过一条自动化的检验流水线，来检查每一个变更的质量，通过就进入下一个阶段。<strong>其不是一种工具，而是一种实践！</strong></p>

<!--more-->


<p>持续交付的共识和管理机制如下：</p>

<ul>
<li><strong>不要阻塞开发人员</strong>，这是实现持续交付的本质理念</li>
<li>为每个团队指定构建负责人或者发布工程师：优化交付流水线，提升交付效率</li>
<li>项目状态应该对参与整个过程（包括构建、部署、测试和发布）的所有人都是可见的</li>
<li>做好风险管理

<ul>
<li><strong>迭代增量式交付</strong>是有效风险管理的关键</li>
<li>手工测试环境、试运行环境和生产环境总是需要严格的访问控制</li>
<li>让风险识别成为每日立会的一部分</li>
</ul>
</li>
<li>做好审计

<ul>
<li>手工测试环境、试运行环境和生产环境总是需要严格的访问控制：指定谁能够访问“特权”环境。</li>
<li>要求每次部署都要进行审计，以确切知道到底修改了哪些内容。</li>
<li>文档自动化、自文档</li>
</ul>
</li>
</ul>


<p>接下来先说明实现持续交付的一些基础设施和准备工作，然后从本地开发和自动化构建/部署流水线两方面说明持续交付的具体实现。</p>

<h2>一. 基础设施和准备工作</h2>

<h3>1.1 基础设施和环境管理</h3>

<p>让所有测试环境（包括持续集成环境）都要与生产环境相似</p>

<ul>
<li>开发人员要把运维人员当做重要用户</li>
<li>切忌吞噬错误信息</li>
<li>使用运维团队熟悉的技术：开发人员最早负责创建部署脚本，后面移交给运维团队负责维护</li>
<li>把创建和维护基础设施需要的所有内容都进行版本控制</li>
<li>以自动化方式进行配置和部署！</li>
<li>像对待生产环境一样对待测试环境！</li>
<li>容器化技术实现不可变基础设施</li>
</ul>


<h3>1.2 配置管理</h3>

<p>版本控制、依赖管理、软件配置管理</p>

<ul>
<li>各个环境的手工配置 -> 自动化配置</li>
<li>对所有内容进行版本控制</li>
<li>指定依赖库的确切版本，不要用快照或者模式匹配版本</li>
<li>配置文件与二进制文件分离</li>
</ul>


<h3>1.3 测试策略</h3>

<ul>
<li>创建全面的自动化测试套件：单元测试、组件测试、验收测试，每一种测试的代码覆盖率都高于80%以上</li>
<li>每次修改都能运行一次自动化测试集合</li>
<li>分层测试</li>
</ul>


<h3>1.4 数据管理</h3>

<ul>
<li>把创建和迁移数据库全部变成自动化过程，是部署流程的一个组成部分</li>
<li>让测试自己创建它们所需的状态，并确保每个测试都独立于其他测试</li>
<li>对数据库进行版本管理，使用DbDeploy这样的工具管理数据迁移过程的自动化。</li>
<li>在大多数据情况下，不要在测试中使用生产数据集的副本。?</li>
<li>数据库回滚和无停机发布

<ul>
<li>蓝绿部署</li>
<li>大多数修改应该是增加操作（比如向数据库中增加新表或字段），尽可能不修改已存在的结构</li>
</ul>
</li>
<li>测试数据

<ul>
<li>测试的独立性、原子性</li>
<li>其他类型的测试，一定不要使用生产数据库的一个dump，除非有特殊情况</li>
</ul>
</li>
<li>部署流水线中的数据管理

<ul>
<li>提交测试：快速运行，避免复杂的数据准备</li>
<li>验收测试：后续阶段可以复用</li>
<li>容量测试：为测试提供足够的输入数据，可以看做验收测试的重复利用</li>
</ul>
</li>
</ul>


<h3>1.5 主干开发</h3>

<p>主干开发的分支模式实现持续交付最好的模式，但为了在主干模式下保持应用可发布，需要做到</p>

<ul>
<li>每次创建分支，都要认识到它带来的成本</li>
<li>频繁提交代码合并到主干</li>
<li>新功能隐藏：功能开关统一管理达到特性隐藏的目的(Togglz?)</li>
<li>增量开发：将所有的变更都变成一系列的增量式小修改，而且每次小的修改都是可发布的。</li>
<li>抽象模拟分支（无法使用增量开发）：修缮者模式，使用门面模式隔离待改造代码。</li>
<li>使用组件，根据不同部分修改的频率对应用程序进行解耦。</li>
</ul>


<h2>二. 本地开发</h2>

<p><strong>让开发者不受阻塞、不受不必要的干扰 -> 持续开发</strong></p>

<p><img src="//post_images/dev/localdev.png" alt="" /></p>

<ul>
<li>确保自动化测试、构建部署脚本都能够在开发机上运行</li>
<li>本地自动化测试：预测试提交pretested commit/个人构建personal build/试飞构建preflight build<strong>【保证本地开发所有验证方式与流水线上的验证方式一致，提高开发人员在本地发现问题的能力】</strong></li>
<li>提交前在本地运行所有的提交测试，等提交测试通过后再继续工作</li>
<li>在可控的环境上部署开发的应用程序</li>
<li>修复破坏应用程序的任意修改是最高优先级的任务，<strong>构建失败后不要提交新代码</strong></li>
</ul>


<h3>2.1 六步提交法</h3>

<p>规范开发习惯。主动提前集成；小步提交、完整代码、不影响已有功能；关注代码规范、动静态扫描问题</p>

<ul>
<li>检出最近成功的代码</li>
<li>修改代码</li>
<li>第一次个人构建</li>
<li>第二次个人构建： 拉取主干代码集成后本地测试</li>
<li>提交代码到主干</li>
<li>提交构建</li>
</ul>


<p>提交不影响已有功能！！</p>

<ul>
<li>增量迭代开发</li>
<li>抽象模拟分支</li>
<li>特性隐藏</li>
</ul>


<h3>2.2 规范化、自动化核心步骤</h3>

<p><img src="//post_images/dev/localdev-detail.png" alt="" /></p>

<ul>
<li>提高开发环境的效率: 环境获取的服务化、自助化；环境的一体化、一致性

<ul>
<li>本地开发环境

<ul>
<li>共享机器池</li>
<li>Git提交日志插入截图：Share Bucket+Google Drive</li>
<li>远程开发机器/Web IDE</li>
<li>依赖的服务

<ul>
<li>维护一个单独的环境，让开发环境接入</li>
<li>服务虚拟化工具来模拟依赖的服务，Mountbank、WireMock</li>
</ul>
</li>
</ul>
</li>
<li>联调环境：提供机器池，确保有两套空闲环境，自助化提供给开发者使用</li>
</ul>
</li>
<li>规范化、自动化本地检查

<ul>
<li>语法检查、规范检查、单元测试：Maven/Gradle插件</li>
</ul>
</li>
<li>建设并自动化代码入库前的检查流程

<ul>
<li>持续集成前的必要工作</li>
<li>代码审查</li>
</ul>
</li>
</ul>


<h3>2.3 代码审查</h3>

<p>人工代码检查</p>

<ul>
<li>统一并明确代码审查标准</li>
<li>统一并明确日志提交规范</li>
<li>传达团队的代码规则、质量基准</li>
<li>LGTM（Looks good to me）</li>
</ul>


<p><strong>方式</strong></p>

<ul>
<li>代码入库前的设计时检查：在设计阶段进行代码审查

<ul>
<li>代码入库前门禁检查，需要考虑灵活性，提供绕过机制</li>
<li>代码入库后检查</li>
</ul>
</li>
<li>工具辅助的线下异步审查：依赖于Gitlab、Gerrit、Code Climate Engines，一对一审查</li>
<li>面对面审查：架构问题、结对编程</li>
<li>代码增量审查/代码全量审查</li>
<li>团队审查：适合专项讨论</li>
<li>代码审查计入工作量和绩效考评</li>
</ul>


<p><strong>代码提交规范</strong></p>

<ul>
<li>原子提交</li>
<li>提交日志规范</li>
</ul>


<p><strong>原则</strong></p>

<ul>
<li>互相尊重</li>
<li>基于讨论</li>
</ul>


<p>相关资料可见：<a href="https://github.com/google/eng-practices/blob/master/review/index.md">谷歌代码审查指南</a></p>

<h3>2.4 快速反馈、增量开发</h3>

<blockquote><p>边开发边验证</p></blockquote>

<ul>
<li>提高运行静态检查和测试的方便性、灵活性：Maven/Gradle插件</li>
<li>提供沙盒环境方便验证和测试

<ul>
<li>容器</li>
<li>小范围的增量构建和验证？</li>
<li>测试数据：直接使用生产环境、生产数据的导出并脱敏</li>
</ul>
</li>
<li>实时检验工具：IDE实时检验、Liveload</li>
</ul>


<h2>三. 自动化构建/部署流水线</h2>

<p>部署流水线就是对软件交付流程的建模。</p>

<p><img src="//post_images/dev/deploy-pipeline.png" alt="" /></p>

<p>实现部署流水线的一些共识如下：</p>

<ul>
<li><strong>流水线建设原则</strong>

<ul>
<li>测试尽量完整，保证产品质量->完备的测试机制</li>
<li>运行速度够快->尽早反馈、提高交付速度</li>
<li>使用的所有环境尽量和生产环境一致->复现问题</li>
</ul>
</li>
<li>所有相关角色提供构建状态可视化：持续交付流水线大屏显示</li>
<li>存储构建结果报告</li>
<li>只要有环节失败，就停止整个流水线！</li>
<li>制品库是特殊的版本控制系统，不需要保存所有版本。</li>
<li>为部署流水线的每个阶段创建脚本：脚本是系统中的一等公民</li>
<li>增量式实现流水线：如果流程中有手工操作部分，就在流水线中为它创建一个占位符。</li>
</ul>


<p>接下来从流水线的各个阶段分别说明。</p>

<h3>3.1 提交阶段</h3>

<p>从技术角度上断言整个系统是可以工作的。</p>

<ul>
<li><strong>编译、单元测试、组装打包、代码分析</strong></li>
<li>少于五分钟，一定不要超过十分钟</li>
<li>提交测试：单元测试、组件测试</li>
<li>只有在某个错误让提交阶段的其他任务无法执行时，才停下来否则就直至提交阶段全部运行完后，汇总所有的错误和失败报告</li>
<li>此阶段的结果：结果报告、二进制包、元数据</li>
</ul>


<h3>3.2 自动化验收测试</h3>

<p>验证一个用户故事或需求的验收条件是否被满足。针对业务！</p>

<ul>
<li><strong>配置环境、部署二进制文件、冒烟测试、验收测试</strong></li>
<li>令验收测试失败的构建版本不能被部署</li>
<li>先部署再测试，重用部署脚本。</li>
<li>类生产环境运行验收测试：大部分是功能验收测试，关注功能正确性</li>
<li>开发人员能够在自己的开发环境中运行自动化验收测试</li>
<li>测试的关注点在系统的行为，而非数据本身。所以抵制使用生产数据的备份做为验收测试</li>
<li>验收测试的性能不是主要考虑问题，重点在测试的全面性。</li>
<li>正确地做验收测试：不要幼稚地对照着验收测试条件，盲目地把所有东西都自动化。</li>
<li>验收测试可以看作所有后续测试阶段（包括容量测试）的某种模板：从部署准备开始，然后核实环境和应用程序都已被正确配置和部署，最后执行测试。</li>
</ul>


<h3>3.3 后续测试</h3>

<ul>
<li>手工测试：探索性测试、易用性测试</li>
<li>非功能测试：性能、安全、可维护、可扩展</li>
</ul>


<h3>3.4 部署发布</h3>

<p>此阶段的触发不需要自动，测试或者运维人员可以做到自服务即可</p>

<ul>
<li>对不同环境采用同一部署方式：使用同样的脚本向所有环境部署，包括开发机器</li>
<li>一键式部署是对环境进行修改的唯一途径。</li>
<li>部署测试：对部署进行冒烟测试，验证部署是否成功，证明其部署的可靠性</li>
<li>确保部署流程是幂等的</li>
<li>只有通过了自动化构建、测试和部署的那些修改才能发布！</li>
<li>明确每个环境的部署和发布都是由谁负责</li>
<li>发布计划：第一次发布，产出一些文档、自动化脚本或其他形式的流程步骤</li>
<li>首次部署：首个迭代的主要目标之一就是在迭代结束时，让部署流水线的前几个阶段可以运行，实现部署流水线的“抽水泵”。

<ul>
<li>部署流水线的提交阶段。</li>
<li>一个用于部署的类生产环境。</li>
<li>通过一个自动化过程获取在提交阶段中生成的二进制包，并将其部署到这个类生产环境中。</li>
<li>一个简单的冒烟测试，用于验证本次部署是正确的，并且应用程序正在运行。</li>
</ul>
</li>
<li>对发布过程进行建模并让构建晋级

<ul>
<li>为了达到发布质量，一个构建版本要通过哪些测试阶段</li>
<li>每个阶段需要设置什么样的晋级门槛或需要什么样的签字许可。</li>
<li>对于每个晋级门槛来说，谁有权批准让某个构建通过该阶段。</li>
</ul>
</li>
<li>将每次已通过验收测试的变更版本部署在试运行环境中</li>
<li>紧急修复: 紧急修复版本也要走完标准的部署流水线，与其他代码变更没什么区别。

<ul>
<li>结对做！</li>
<li>有时候回滚比部署新的修复版本更划算。</li>
</ul>
</li>
<li>持续部署：每当有版本通过自动化测试之后，就将其部署到生产环境中。【需要依赖强大的自动化测试机制】</li>
</ul>


<h3>3.5 度量</h3>

<p>每次提交后都产生关于这些度量的报告和可视化效果并保存起来</p>

<ul>
<li>周期时间（cycle time），从决定要做某个特性开始，直到把这个特性交付给用户的这段时间</li>
<li>自动化测试覆盖率</li>
<li>代码库特征</li>
<li>缺陷数量</li>
<li>交付速度</li>
<li>提交版本库次数</li>
<li>构建次数</li>
<li>构建失败次数</li>
<li>构建所花时间</li>
</ul>


<h2>四. 其他</h2>

<h3>4.1 DevOps</h3>

<p>Devops是这些年很流行的一个概念，其目的就是打通研发和运维环节，以达到全员目标一致，保障软件高效交付。</p>

<p><img src="//post_images/dev/devops.png" alt="" /></p>

<ul>
<li>职能团队提供平台和工具，让全栈工程师能够自己处理端到端的工作，实现DevOps。</li>
<li>全栈开发：工程师不再只是对某一个单一职能负责，而是对最终产品负责。</li>
</ul>


<h3>4.2 信息溯源</h3>

<p>打通研发流程中流动的多种标识信息，以方便相关人员快速获取需要的信息，提高工作效率。包括任务工单、代码提交号、版本号、代码审查 ID、测试用例 ID、Bug ID。</p>

<ul>
<li>制品与源代码版本管理：放置在制品包中的元数据，体现源代码版本号。</li>
<li>源代码与需求/Bug的版本关联: 提交代码时需要在注释里注明需求ID、测试用例ID等。</li>
</ul>


<h2>五. 参考资料</h2>

<ul>
<li><a href="https://book.douban.com/subject/6862062/">《持续交付》</a></li>
<li><a href="https://book.douban.com/subject/30419555/">《持续交付2.0》</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《清教徒的礼物》学习笔记]]></title>
    <link href="http://www.rowkey.me/blog/2020/05/31/qjt/"/>
    <updated>2020-05-31T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/05/31/qjt</id>
    <content type="html"><![CDATA[<p>同学推荐的一本管理书籍，主要是讲的美国的管理文化在世界各地的普及，尤其是日本和中国。阐述了清教徒（第一批欧洲移民，起源于英国，在北美殖民地得以实践与发展）的一些特质，也是美国能够打赢两次世界大战的原因，包括：建造“人间天国”的坚定信念；亲力亲为的技师精神；集体主义；组织能力：善于协调各种财力、物力和人力的组织能力。并且在书的最后给出了管理黄金时代优秀实务背后的25条原理。看完这本书，对于其中的一些东西很有共鸣，比如：自下而上的管理、专家（职业经理人）崇拜的危害等。</p>

<!--more-->


<p><img src="//post_images/qjt-notes.png" alt="" /></p>

<ul>
<li>清教的四个特点

<ul>
<li>建造“人间天国”的坚定信念</li>
<li>亲力亲为的技师精神：重视技术、重视技术人员</li>
<li>集体主义：集体大于个人</li>
<li>组织能力：善于协调各种财力、物力和人力的组织能力</li>
</ul>
</li>
<li>自下而上的管理

<ul>
<li>逐步去中心化</li>
<li>在十分正式的组织上面强加一个高度非正式的组织</li>
<li>把决策权沿指挥链下放至愿意承担又能够承担的最低层级</li>
<li>火线管理者从事基本的管理工作，上级管理层的工作是派生的</li>
<li>所有权力和责任都集中在火线管理者，只有火线管理者独立完成不了的，才交给上级管理者</li>
</ul>
</li>
<li>专家崇拜的危害：不懂业务的管理专家会带来诸多负面影响，包括各种强制量化，唯数据论等。</li>
<li>指导下属自学是自下而上管理的基本方法之一<strong>【杠杆率高的工作】</strong></li>
<li>优秀实务背后的25个原理

<ul>
<li>所有成功组织，不管多么简单，都由系统嵌套而成。</li>
<li>所有系统都离不开常规工作的补充，这些常规要定期审查和更新。</li>
<li>任何组织最重要的子系统都是层级，其基础很有可能是某种形式的直线职能制。</li>
<li>最好的层级形式是“自下而上”。</li>
<li>”集体决策“带来正确的决定<strong>【集体决策是风险最小的决策，但不一定是最正确的决策】</strong></li>
<li>领导层应尽量实行集体决策制或“共治“</li>
<li>中层管理者是管理的”拱心石“</li>
<li>一人一上司<strong>【混血型组织一般是多重汇报机制】</strong></li>
<li>会议是”管理工作的媒介“</li>
<li>计划应该分为短期（1-4年）、中期（5-8年）和长期（9年以上）。</li>
<li>研究前人的成败，从前人的经验中学习。</li>
<li>各个方向尤其是向上的信息流动畅通无阻，对组织的成功非常必要。</li>
<li>管理者在实际意义和道德意义上都应该是领导者</li>
<li>应该保守地使用顾问；应该把顾问”放在手边“而非”供在头上“</li>
<li>管理者应该清楚自己的社会责任，包括把员工当人而非商品对待</li>
<li>不要等坏了才修，要注意保养和改进。</li>
<li>像回避瘟神一样回避债务，如果不可能做到完全回避，那么尽可能少借债。</li>
<li>管理者应该拥有或获得”领域知识“，即深刻了解公司的技术和业务，这种知识只能通过在公司或公司所在行业长期实践才能获得</li>
<li>对管理者的考核和培训应该是实用的、连续的。</li>
<li>任何想晋升到顶层的管理者都该从底层做起。</li>
<li>工作轮换有利于打造”全才型“经理人。</li>
<li>用人应该持长期导向，这个长期至少8年，最好是10年。</li>
<li>互补是任命的关键之一。</li>
<li>薪酬制度应该奖励并促进合作。</li>
<li>像回避瘟神一样回避炫耀和张扬。</li>
</ul>
</li>
</ul>


<p>&ndash;</p>

<p>书籍链接：<a href="https://book.douban.com/subject/26760576/">https://book.douban.com/subject/26760576/</a></p>

<p><img src="http://www.rowkey.me/post_images/qjt.png" width="300"/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术管理标准模板]]></title>
    <link href="http://www.rowkey.me/blog/2020/04/25/tech-leader-manage/"/>
    <updated>2020-04-25T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2020/04/25/tech-leader-manage</id>
    <content type="html"><![CDATA[<p>对于技术团队新晋升的一些研发Leader，即使在大公司具有完善的培训机制，大多数人在一开始还是会手足无措，不能很好地做到从个人贡献者到团队贡献者角色的转变。于是根据自己以及公司内部很多技术管理者的工作经验梳理出了一些技术管理者的管理模板，可以作为管理工作的实践参考。</p>

<!--more-->


<p><img src="//post_images/tech-manage.png" alt="" /></p>

<h2>看方向</h2>

<ul>
<li><p>向上级明确团队的职责</p></li>
<li><p>基于职责确定团队的使命、目标</p></li>
<li><p>把职责、使命向团队成员传达清楚</p></li>
<li><p>做好团队规划，包括：规模、分工、梯队、资源盘点等</p></li>
<li><p>建立团队的WIki，包括：职责、使命、目标、团队规划、人员分工、规章制度等</p></li>
</ul>


<h2>管事</h2>

<ul>
<li><p>OKR</p>

<ul>
<li><p>制定团队OKR，对齐公司和部门OKR</p></li>
<li><p>跟进团队成员的个人OKR制定和进度跟踪</p></li>
<li><p>跟踪OKR进展，识别高绩效人才</p></li>
</ul>
</li>
<li><p>技术管理</p>

<ul>
<li><p>参与技术方向决策，将研发规范、例会等信息明确传达给团队成员并推进</p>

<ul>
<li><p>技术评审规范</p></li>
<li><p>代码风格规范</p></li>
<li><p>代码开发规范</p></li>
<li><p>代码管理规范</p></li>
<li><p>CodeReview规范</p></li>
</ul>
</li>
<li><p>组织技术评审、CodeReview</p></li>
<li><p>制定学习分享机制并切实推行</p></li>
<li><p>团队所负责维护的系统的周期巡检</p></li>
<li><p>公司层面基础技术以及成熟开源项目的引入和推进</p></li>
<li><p>了解技术方向相关技术的技术采纳生命周期，根据公司现状知道何时引入相应的技术</p></li>
</ul>
</li>
<li><p>项目管理</p>

<ul>
<li><p>技术方案确定</p>

<ul>
<li><p>技术选型</p></li>
<li><p>技术架构</p></li>
<li><p>技术难点</p></li>
<li><p>性能瓶颈</p></li>
<li><p>上下游系统</p></li>
<li><p>功能模块</p></li>
</ul>
</li>
<li><p>根据技术评审的结果预估开发工期并做好关键时间点的把控</p>

<ul>
<li><p>系统、模块、功能的设计以及简述</p></li>
<li><p>参与的研发人员以及分工</p></li>
<li><p>预估工时</p></li>
<li><p>预计完成时间</p></li>
<li><p>关键时间点、里程碑</p></li>
<li><p>确定会议机制：晨会、周会</p></li>
</ul>
</li>
<li><p>创建并保持项目文档的更新</p>

<ul>
<li><p>技术调研文档</p></li>
<li><p>方案选型文档</p></li>
<li><p>需求文档</p></li>
<li><p>系统设计文档</p></li>
</ul>
</li>
<li><p>项目风险管理</p></li>
<li><p>项目质量管理，包括代码质量把控和监控告警设施的接入</p></li>
<li><p>协调资源推进项目进展</p></li>
</ul>
</li>
<li><p>技术产品运营</p>

<ul>
<li><p>提炼团队项目的公共抽象部分，组件化和平台化</p></li>
<li><p>组件、技术平台的推广</p></li>
</ul>
</li>
<li><p>成本管理</p>

<ul>
<li><p>技术选型时把成本做为重要考量项</p></li>
<li><p>提升团队资源的利用率</p></li>
<li><p>关注团队的人力成本和技术成本</p></li>
<li><p>关注团队的产出价值</p></li>
</ul>
</li>
<li><p>流程改进</p>

<ul>
<li><p>定位阻碍研发的流程节点，寻找有效的解决方案</p></li>
<li><p>寻求有效工具或者方案提升关键流程效率</p></li>
</ul>
</li>
<li><p>制度建设</p>

<ul>
<li><p>明确公司和部门的规章制度并推进实行</p></li>
<li><p>根据团队需要，制定团队规章制度</p></li>
<li><p>制定SOP，保障下限水准</p></li>
<li><p>明确团队例会制度</p></li>
</ul>
</li>
</ul>


<h2>管人</h2>

<ul>
<li><p>定期的一对一沟通</p>

<ul>
<li><p>你所负责业务的完成情况到现在怎么样？目标完成情况怎么样？</p></li>
<li><p>这段时间自我评价绩效如何？什么原因？</p></li>
<li><p>你个人有没有什么你觉得我应该知道的？</p></li>
</ul>
</li>
<li><p>关注团队成员职业规划和能力成长，给与指导和建议</p></li>
<li><p>关注团队成员工作状态</p></li>
<li><p>组织团建，提高团队凝聚力</p></li>
</ul>


<h2>管理仪表盘</h2>

<p>建立自己的管理仪表盘，关注关键数据</p>

<ul>
<li><p>系统监控数据（QPS、硬件资源使用率、错误数等） -> 提前发现系统瓶颈，消除隐患；提高资源利用率，降低成本</p></li>
<li><p>项目构建报告（单元测试覆盖率报告、代码质量报告、构建失败与成功概况） -> 关注项目研发质量，保障持续交付</p></li>
<li><p>项目/任务进度 -> 保证项目/任务正常进行</p></li>
<li><p>业务关键数据指标 -> 关注业务价值，提升团队成员成就感</p></li>
<li><p>OKR进度 -> 关注OKR实现状况，识别高绩效人员</p></li>
<li><p>团队成员的每日/周的工作状况 -> 关注团队成员状况</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
