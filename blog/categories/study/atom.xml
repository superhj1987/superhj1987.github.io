<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | 后端技术杂谈]]></title>
  <link href="http://www.rowkey.me/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://www.rowkey.me/"/>
  <updated>2022-06-04T10:06:17+00:00</updated>
  <id>http://www.rowkey.me/</id>
  <author>
    <name><![CDATA[Mr.H]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[阅文笔记202205]]></title>
    <link href="http://www.rowkey.me/blog/2022/05/04/article-notes/"/>
    <updated>2022-05-04T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2022/05/04/article-notes</id>
    <content type="html"><![CDATA[<p>记录在阅读公众号、博客上一些好的文章时的笔记和心得。</p>

<!--more-->


<h2>一.《张一鸣：为什么 BAT 挖不走我们的人才？》</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;mid=2651821900&amp;idx=1&amp;sn=04fd5b9295c4a69b3fee3bbc38b53209">https://mp.weixin.qq.com/s?__biz=MzI3MzEzMDI1OQ==&amp;mid=2651821900&amp;idx=1&amp;sn=04fd5b9295c4a69b3fee3bbc38b53209</a></p>

<blockquote><p>人成功了就会到处说自己多厉害，张一鸣自然有他的独到之处，但是这些东西可能也就适用于头条。</p></blockquote>

<ul>
<li>流程的好处与坏处：没有流程会乱，流程太多会束缚</li>
<li>优秀的人只需要原则即可</li>
<li>员工激励

<ul>
<li>最好的ROI，找优秀的人，干优秀的事</li>
<li>把更多的激励放到事后，放到年终，把更多的激励换成与个人贡献相关而不是与投资眼光相关。</li>
<li>公平理性按照岗位职级和绩效考核定薪酬</li>
</ul>
</li>
<li>好的特质：满足感</li>
</ul>


<h2>二. 《没有被了解的API？一个老码农眼中的API世界》</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzAwOTcyNzA0OQ==&amp;mid=2658975476&amp;idx=1&amp;sn=6b912551bddce66214a80987042fe963">https://mp.weixin.qq.com/s?__biz=MzAwOTcyNzA0OQ==&amp;mid=2658975476&amp;idx=1&amp;sn=6b912551bddce66214a80987042fe963</a></p>

<blockquote><p>文章有点难懂，不过API的设计和实现确实是一个值得好好思考的事情。</p></blockquote>

<ul>
<li>API设计的经验性原则

<ul>
<li>功能的完整性</li>
<li>调用的简单性</li>
<li>设计的场景化：预期的场景用例</li>
<li>有无策略性的设置：  使用回调、虚函数、代理或模板等来实现调用者的策略设置</li>
<li>面向用户的设计：调用者编写函数名</li>
<li>不推卸责任

<ul>
<li>害怕设置策略，函数参数多达十个</li>
<li>牺牲可用性来提高效率</li>
</ul>
</li>
<li>清晰的文档化

<ul>
<li>最不适合编写文档的人是API的实现者</li>
<li>最不适合编写文档的时间是在实现之后</li>
<li>确保文档是完整的，特别是关于错误处理的文档</li>
</ul>
</li>
<li>API的人体工程学

<ul>
<li>一致性问题：相同顺序放置特定类型的参数；统一的错误处理</li>
</ul>
</li>
</ul>
</li>
<li>性能约定

<ul>
<li>分类

<ul>
<li>恒定的性能</li>
<li>通常的性能</li>
<li>可预期的性能</li>
<li>未知的性能</li>
</ul>
</li>
<li>按性能划分API</li>
<li>API的性能变化</li>
<li>API调用失败时的性能</li>
<li>确保API性能的经验方法

<ul>
<li>谨慎地选择API和程序结构：考虑性能约定</li>
<li>在新版本发布时提供一致的性能约定</li>
<li>防御性编程</li>
<li>API公开的参数调优</li>
<li>测量性能以验证假设</li>
<li>使用日志检测和记录异常</li>
</ul>
</li>
<li>API设计的文化认知

<ul>
<li> API的有意识训练</li>
<li> API设计人才的流失</li>
<li> 开放与控制</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>三. 《疫情下技术的应对之道-成本篇》</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzUxMTEwODc5OA==&amp;mid=2247483665&amp;idx=1&amp;sn=663a412b14cff8d39a86f0c2db7c25b8">https://mp.weixin.qq.com/s?__biz=MzUxMTEwODc5OA==&amp;mid=2247483665&amp;idx=1&amp;sn=663a412b14cff8d39a86f0c2db7c25b8</a></p>

<blockquote><p>最近公司也在做技术成本优化，这篇文章系统化地阐述了优化措施，给了自已一些思路。</p></blockquote>

<ul>
<li>考虑降本介入的时机：业务发展平稳期</li>
<li>统一思想：多部门配合，顶层推动，明确衡量标准，统一制定目标，分解KPI，分阶段落实</li>
<li>制定可量化的指标。目标一定要和业务结合起来。【这一点我之前忽视了，单单去追求价格了，其实应该和业务结合了】

<ul>
<li>电商：每订单IT成本</li>
<li>视频：用户在线时长与IT成本比值</li>
<li>游戏：收入流水与IT成本比值</li>
</ul>
</li>
<li>制定目标后，纵向可以看每单位成本是否呈下降趋势。横向可以和具有相同业务模式的公司横向对比。</li>
<li>多维度分析钱花到哪里去了

<ul>
<li>支出构成，构成的比例是否合理

<ul>
<li>自建IDC：服务器、网络设备、机柜电力费用、专线、带款、备件</li>
<li>公有云：cache、DB、带宽、ECS（云硬盘、EIP）</li>
</ul>
</li>
<li>供应商和分类维度

<ul>
<li>哪个类型的供应商支出最高</li>
<li>哪家供应商支出最高</li>
</ul>
</li>
<li>部门和应用维度

<ul>
<li>哪个部门支出最高</li>
<li>哪个应用支出最高</li>
</ul>
</li>
<li>成本优化原则

<ul>
<li>该节省的节省，该花钱的花钱，控制成本不能以牺牲稳定性为代价，切忌过度优化</li>
<li>抓大放小，从供应商、业务、资源等多个角度去看，哪里花钱多就先从哪里着手</li>
</ul>
</li>
<li>优化实施

<ul>
<li>买便宜的东西。如在成本上升期指定采购框架，阶梯定价等</li>
<li>买合适的东西。制定标准，做相对最优的选择</li>
<li>用好已经在线的资源。提高已有资源的使用率</li>
<li>基于虚拟化、容器技术提高资源切分颗粒度，资源调度的能力，提升部署密度</li>
<li>架构优化，基础组件平台化、池化部署。提高资源复用程度，避免重复建设</li>
</ul>
</li>
<li>基于工具化、智能化、可视化，保证成本优化能持续地、低成本地进行，要成为日常技术运营工作的一部分，一个常态。</li>
</ul>
</li>
</ul>


<h2>四. 《如果只定一个指标，研发的考核指标应该是什么？》</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzg5MTcxNA==&amp;mid=2247484101&amp;idx=1&amp;sn=c58aa0f94e5fce08ff0ba9a46427a4df">https://mp.weixin.qq.com/s?__biz=MzIzNzg5MTcxNA==&amp;mid=2247484101&amp;idx=1&amp;sn=c58aa0f94e5fce08ff0ba9a46427a4df</a></p>

<blockquote><p>我自己的看法是如果不能衡量一个事物的所有方面，那么就不要衡量。但这篇文章在作者自己的场景下确实有它的适用之处</p></blockquote>

<ul>
<li>研发团队考核指标：是否完成JIRA上分配的关键任务，所有任务都是以两周为周期进行安排，基本完成记3分，彻底完成记5分，彻底完成而且有测试例验证，记8分。一个周期至多三个关键任务，一个季度按照总得分发放季度奖金。</li>
<li>理由

<ul>
<li>简单的原则：指标要简单</li>
<li>软件研发的核心问题是进度保证</li>
<li>鼓励团队最先去解决能提升公司价值和竞争力的问题</li>
<li>借助CICD等自动化工具保证代码质量。侧重于看测试结果、性能报告，以结果来驱动优化、驱动质量的提升</li>
<li>实事求是，一切都要有无可辩驳、可以查证的记录。任务全公司透明。</li>
<li>追求卓越。卓越用数字量化，用数字说话。</li>
</ul>
</li>
<li>任何任务，产出或提交产物需要定义清楚，软件研发的提交物应该明确包括API与测试用例。</li>
</ul>


<h2>五. 《美团张川：做了8年平台，我总结了平台的5道坎》</h2>

<p><a href="https://mp.weixin.qq.com/s/bwcJGpR2iwai-LJY0sMoew">https://mp.weixin.qq.com/s/bwcJGpR2iwai-LJY0sMoew</a></p>

<blockquote><p>对平台的阐述确实有独到之处：能做大的平台都需要动态不平衡。低频需求靠广告，高频需求靠补贴。</p></blockquote>

<ul>
<li>动态不平衡形成真正的平台

<ul>
<li>双边平台</li>
<li>不会产生单个用户和单个服务提供者在一段时间内多次达成同一个交易的过程</li>
<li>陷阱：表面看上去是动态不平衡，实际上是平衡的

<ul>
<li>初始不平衡，结尾平衡：家教、美容美发->标准化服务、拆细服务</li>
<li>平台专家: 专家和普通服务者差距不大的服务，专家服务标准化</li>
</ul>
</li>
</ul>
</li>
<li>标准化决定平台大小

<ul>
<li>判断服务是否可以标准化：服务的体验可以一致化，客户的评价可以标准化</li>
<li>把不标准化的服务变成标准化的服务;在不标准化的服务上形成平台</li>
<li>把复合型的服务拆解开来，变成一些可以标准化的分步骤</li>
<li>不做交易的平台，做信息的平台</li>
</ul>
</li>
<li>高频打低频是误解

<ul>
<li>高频不能带动低频，或者说高频带动低频不太明显：高频带动中频，形成巨大的用户平台，然后优化低频体验</li>
<li>高频服务靠补贴，低频服务靠长期广告</li>
<li>多个低频可以聚集成高频</li>
<li>低频服务很难出现好的产品经理</li>
</ul>
</li>
<li>供给端的效率高，平台价值大

<ul>
<li>短期看需求，长期看供给</li>
<li>两个方向

<ul>
<li>供给是不是可以大批量供给，并且接近于无限供给</li>
<li>是不是平台提高了供给端的效率，让供给端能赚到钱</li>
</ul>
</li>
<li>三个关键点

<ul>
<li>供给的快和慢</li>
<li>“供大于求，供不应求”</li>
<li>没有稳定供给的市场，不会是一个巨大无比的市场</li>
</ul>
</li>
</ul>
</li>
<li>商业模式：剃须刀还是电冰箱

<ul>
<li>剃须刀（LTV，生命周期总价值）vs   电冰箱（CAC，用户获取成本）</li>
<li>关注NPS（净推荐值），客户推荐的概率。在低频业务里面降低CAC（获客成本），在高频业务中提升LTV（生命周期总价值）</li>
</ul>
</li>
</ul>


<h2>六. 《翻译漫谈 - 地道中文怎么写？英中翻译要避免哪些坑？》</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzU3NjkxNTQ0Ng==&amp;mid=2247483696&amp;idx=1&amp;sn=14b59459ae953d12b68da3ca43708ab3">https://mp.weixin.qq.com/s?__biz=MzU3NjkxNTQ0Ng==&amp;mid=2247483696&amp;idx=1&amp;sn=14b59459ae953d12b68da3ca43708ab3</a></p>

<blockquote><p>所谓的英式中文，每次读到真的是觉得很别扭。本文则讲述了如何避免这些情况。</p></blockquote>

<ul>
<li>与字对字翻译有关的问题

<ul>
<li>避免不必要的主谓语分离，不要在中文中使用类似「As a&hellip;, he is&hellip;」的句式。</li>
<li>避免在翻译「When/After&hellip;, &hellip;」时，用「当……，……」的句式。</li>
<li>「while」「though」的翻译</li>
<li>很多情况下，「you」「your」都不必要翻译成「你/您」「你/您的」</li>
<li>翻译「such as…」「…like…」 以及写作中文的时候，除非后面举例的内容很长，否则请避免使用「……，比如……、……、……。」的句式</li>
<li>在使用/翻译术语时避免生搬英文字面意思，而是要通过调研市场以及中文语言环境，找到最合适的地道中文词</li>
</ul>
</li>
<li>与中英文语法/表达习惯有关的问题

<ul>
<li>避免泛泛地使用「……之一」，列举确定数量的事物之一时除外</li>
<li>partly because of」不要翻译成「部分原因在于」或者任何带有「部分」的形式</li>
<li>尽量少用被动句式，因为地道的中文里并没有太多被动语态</li>
<li>尽量避免「万能动词＋抽象名词」的句式</li>
<li>复数的处理：  中文并没有单复数变化，我们会在名词前加上「许多」或是数量，甚至不加修饰只透过前后文来强调复数，而不是加上「们」</li>
<li>中文写作时要避免受到英文习惯的影响：  英文经常会用设问句式来启发用户阅读后文，而中文会更多使用清晰肯定的陈述句。</li>
</ul>
</li>
<li>好的翻译Tips

<ul>
<li>目标语言（target language）语感（即直接、迅速地感悟语言文字的能力）好，知道什么样的句子/表达是好的/不好的，知道什么样的内容需要对应什么样的语言风格，写作有逻辑，用词丰富</li>
<li>源语言（source language）语感好，能分清句子（尤其是长句/复杂句）结构、拆分意群</li>
<li>善用工具，包括辞典、搜索引擎、计算机辅助工具（CAT）等等，寻找最准确、最适合所译内容的词汇和表达</li>
<li>不做字对字的翻译，译文没有翻译腔，即在理解源语言文本所蕴含意思的基础上，摆脱源语言的句子结构、表达习惯，灵活运用目标语言，准确恰当地表达原文含义</li>
</ul>
</li>
</ul>


<h2>七. 《聊聊数据库的未来，写在 PingCAP 成立五周年前夕》</h2>

<p><a href="https://mp.weixin.qq.com/s?__biz=MzI3NDIxNTQyOQ==&amp;mid=2247491223&amp;idx=1&amp;sn=e5cb7dd392e54228f6897d0d7b74551f">https://mp.weixin.qq.com/s?__biz=MzI3NDIxNTQyOQ==&amp;mid=2247491223&amp;idx=1&amp;sn=e5cb7dd392e54228f6897d0d7b74551f</a></p>

<blockquote><p>网红数据库TiDB的创始人写的关于数据库的未来。总体就是数据库越来越智能，无须再担心分库、分表的问题 ​</p></blockquote>

<ul>
<li>Single Source of Truth：  数据贯穿在应用逻辑各个角落，系统中对于任意数据的存取都应该是可以不加限制的</li>
<li>数据是架构的中心

<ul>
<li>系统=业务逻辑x数据</li>
</ul>
</li>
<li>以分布式数据库为统一中心的架构

<ul>
<li>整个架构的中心是一个场景覆盖度足够广，且具有无限的水平伸缩能力的存储系统。大部分数据的流动被限制在这个数据库内部，这样应用层就可以几乎做到无状态，因为这个中心的数据库负责了绝大部分状态，每个应用可以通过自己的缓存来进行加速。</li>
<li>缓存层需要离业务层更近</li>
<li>HTAP
<img src="//post_images/htap.jpg" alt="" /></li>
</ul>
</li>
<li>未来

<ul>
<li>弹性调度会是未来的数据库的核心能力</li>
<li>下一个阶段是智能</li>
</ul>
</li>
</ul>


<h2>八. 《GSA管理导图：神秘的战略突破之钥》</h2>

<p><a href="https://mp.weixin.qq.com/s/iZCTGcc5BXiNSMp-ZDnKHQ">https://mp.weixin.qq.com/s/iZCTGcc5BXiNSMp-ZDnKHQ</a></p>

<ul>
<li>日常运营管理：持续改善现状

<ul>
<li>关注当下的事</li>
</ul>
</li>
<li>战略管理：持续寻求突破点

<ul>
<li>关注未来的事</li>
<li>根据洞察，对未来的机会做出假设，提前做好准备，将洞察转化为企业经营的绩效，推动企业持续突破，获得增长。</li>
</ul>
</li>
<li>GSA管理导图：聚焦G成果略目标，选定最合适的S策略目标（路径），透过高效的A活动目标（行动），最终推动战略落地。选择合适的S及管控A，有效的推动G落地。

<ul>
<li>G代表Goal，我们称之为成果目标：具有突破性，制定成果目标需要有强大的洞察力及坚定力，成果目标是一种滞后性的目标。

<ul>
<li>一年做三件事</li>
<li>战略规划的产出就是战略目标，制定战略目标需要非常聚焦（少于三个），需要具有突破性（改变企业运行的常态），需要有强大的洞察力（对未来的假设），更需要团队的共识（先相信，才能看见，举国之力办大事）</li>
</ul>
</li>
<li>S代表Strategy，我们称之为策略目标：路径选择，要完成（G）成果目标最高效的路径，追求成果的路径有多种。策略目标是一种引领性的目标。

<ul>
<li>谋定而后动</li>
<li>作用

<ul>
<li>它能够让我们在采取行动之前，引导我们好好思考，什么路线是最有效的</li>
<li>整合公司的资源</li>
</ul>
</li>
<li>制定策略目标是GSA管理导图中最具挑战性的工作，需要强大的业务专业能力</li>
</ul>
</li>
<li>A代表Action，我们称之为活动目标：应该如何活动，得以让目标在选定的路径上迅速推进。需要强大的专业力及创新力来制定活动目标，活动目标是一种超引领性的目标，也是唯一可以管控的目标，更需要根据G和S的情况做出快速灵活的修正。

<ul>
<li>关键高频可控</li>
<li>是唯一可以管控的目标</li>
<li>高频的活动</li>
<li>关键的，具有最大的杠杆力来推动策略目标达成</li>
</ul>
</li>
</ul>
</li>
<li>GSA：1:2:4

<ul>
<li>GSA三类目标的数量比例最好是1:2:4</li>
</ul>
</li>
</ul>


<h2>九. 《“元宇宙”概念引爆科技创投界 它将颠覆人类社会？》</h2>

<p><a href="http://finance.sina.com.cn/tech/csj/2021-04-08/doc-ikmxzfmk5587495.shtml">http://finance.sina.com.cn/tech/csj/2021-04-08/doc-ikmxzfmk5587495.shtml</a></p>

<p>Metaverse元宇宙：一个平行于现实世界的虚拟世界，拥有现实世界的一切形态。</p>

<p>特点:</p>

<ul>
<li>持续性：这个世界能够永久存在，不会停止</li>
<li>实时性：能够与现实世界保持实时和同步，拥有现实世界的一切形态</li>
<li>兼容性：它可以容纳任何规模的人群以及事物，任何人都可以进入</li>
<li>经济属性：存在可以完整运行的经济系统，可以支持交易、支付、由劳动创造收入等</li>
<li>可连接性：数字资产、社交关系、物品等都可以贯穿于各个虚拟世界之间，以及可以在“虚拟世界”和“真实世界”间转换</li>
<li>可创造性：虚拟世界里的内容可以被任何个人用户或者团体用户来创造</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2018/02/06/2017books/"/>
    <updated>2018-02-06T11:29:34+00:00</updated>
    <id>http://www.rowkey.me/blog/2018/02/06/2017books</id>
    <content type="html"><![CDATA[<p>2017年一共阅读了九本书，包括技术和管理，并且参加了一次“高价值管理人”的管理培训课程，在技术和管理方面都有了一定的学习，得到了一些进步。</p>

<!--more-->


<h2>技术</h2>

<ul>
<li><p>架构真经</p>

<blockquote><p>虽然是基于电商系统进行的讲解，但是其很多架构原则都是普适的。其中讲的很多东西都是自己在实践中做过的东西。经过理论的总结之后，确让自己有了更深的思考。强烈推荐架构入门者阅读此书。</p></blockquote></li>
<li><p>聊聊架构</p>

<blockquote><p>这本书还没出来之前，各路技术大神评价非常高。出来之后，很多人都在吐槽这本书在故弄玄虚。其实，就我来看，前几章确实有点哲学的感觉，但相信有架构经验的人是能够有共鸣的。架构的本质也的确和哲学有关系。这本书比较适合有一定架构经验的工程师来阅读，并不适合经验尚浅者。</p></blockquote></li>
<li><p>Java性能权威指南</p>

<blockquote><p>一本涵盖Java调优方方面面的书籍。从JVM内存、JIT到集合使用等等。虽然我们一直强调不能“过早优化”，但是对于一些应当普遍意识到的优化措施还是越早越好的，否则当产生了问题再来优化，成本反而会更大。强烈推荐Java工程师阅读此书。</p></blockquote></li>
<li><p>大数据之路-阿里巴巴大数据实践</p>

<blockquote><p>讲述阿里巴巴大数据平台的演化之路。这本书讲的很多东西虽然都是阿里自研的，并没有全部开源。但是很多软件的使用兼容了开源软件，尤其是一些诸如解决数据倾斜问题、去重指标计算的思路也是普遍适用的。对照一下，可以理出自己公司在大数据平台上哪些做的不错，哪些还没做，哪些需要优化。</p></blockquote></li>
<li><p>亿级流量网站核心技术</p>

<blockquote><p>本书作者是IT著名博主，自己上学时就看过他写的Spring系列。因此在此书出版之前就觉得应该是本好书。读完此书，学到了一些东西，比如Nginx+Lua/Openrestry在高并发、大流量场景下的使用、Consult的统一配置、使用Lua脚本做Nginx动态负载均衡等。但有点令人失望的是，很多东西都是一笔带过，尤其是穿插了大量类库的使用代码（自我觉得出版书籍一定要避免大量代码，完全是可以放到Github上，而且类库的使用代码完全是可以阅读官方文档的）。比较适合没有架构经验的人来了解一下大公司架构使用了哪些技能，有经验的则可以当做一本参考手册，查漏补缺。</p></blockquote></li>
<li><p>响应式微服务架构（Reactive-Microservices-Architecture）</p>

<blockquote><p>O&#8217;Reilly的系列电子书。讲述了在设计分布式系统时候的一些原则，在架构层面指导微服务的实现。</p></blockquote></li>
</ul>


<h2>管理</h2>

<ul>
<li><p>格鲁夫给经理人的第一课</p>

<blockquote><p>公司管理层统一学习的一本管理书籍。第一次系统地学习了管理方面的知识，印证了很多实践中已经在采取的方法的合理性，也让自己有了新的管理思路。强烈推荐给刚刚进入管理领域的人。</p></blockquote></li>
<li><p>技术管理之巅</p>

<blockquote><p>不同于其他管理书籍，此书着重于从技术Leader角度讲述如何管理研发人员，打造高效技术团队。其中如何量化研发人员的绩效指标给了自己不小的启发，后面也运用了起来。此外，如何建立研发职级体系、如何敏捷管理项目等等都是可以借鉴的地方。</p></blockquote></li>
<li><p>架构即未来</p>

<blockquote><p>《架构真经》的姊妹篇，早于《架构真经》，不仅仅讲述了技术架构的知识，更让我受用的是前面部分讲的“构建可扩展的组织架构”。对于诸如管理和领导、敏捷组织架构、问题和故障等等的概念讲解的非常透彻。而后面技术架构这一块则是对《架构真经》的一个引子。</p></blockquote></li>
</ul>


<h2>2018</h2>

<p>2018年需要花大量精力在技术管理和机器学习方面，暂定需要阅读的几本书如下：</p>

<ul>
<li><p>OKR: 源于英特尔和谷歌的目标管理利器</p>

<blockquote><p><strong><em>截止2018.02.06已经完成阅读。</em></strong>此书是公司管理层进行统一学习的一本书，不厚，花了三个晚上大约6个小时就读完了。讲述了什么是OKR、OKR的好处、如何使用OKR等等，推荐想要进行OKR实践的管理人员阅读。</p></blockquote></li>
<li><p>微服务反模式和陷阱（Microservices AntiPatterns and Pitfalls）</p></li>
<li>机器学习实战 &amp;&amp; 机器学习西瓜书</li>
<li>Tensorflow实战</li>
<li>深入分布式缓存</li>
<li>高性能MySQL</li>
<li>尽在双11，阿里巴巴技术演进与超越</li>
<li>Clean Architecture, A Craftsman&rsquo;s Guide to Software Structure and Design</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2016/12/30/2016books/"/>
    <updated>2016-12-30T09:13:46+00:00</updated>
    <id>http://www.rowkey.me/blog/2016/12/30/2016books</id>
    <content type="html"><![CDATA[<p>16年由于工作、身体等各种原因，阅读的书籍并不多。主要集中在技术方面。</p>

<ul>
<li><p>计算广告</p>

<blockquote><p>广告是什么？广告的效果如何评价？机器学习如何应用在计算广告上？作者从产品、运营、技术角度分别进行了阐述。是其计算广告课程（清华、北航的研究生课程）的总结和输出，推荐广告系统开发工程师学习和参考，个性化推荐系统的开发者也能够从中得到很多启发。</p></blockquote></li>
<li><p>集体智慧编程</p>

<blockquote><p>机器学习的经典书籍。讲述了集体智慧相关的东西，也是推荐系统相关的一本书。可以看做是机器学习的入门书籍。</p></blockquote></li>
<li><p>七周七并发模型</p>

<blockquote><p>多线程、Actor、Lambda架构等八种并发模式。看完此书，确实能够开阔眼界，拓展思路。和系列中的《七周七语言》《七周七数据库》《七周七Web开发框架》都是类似的拓展眼界的佳作。</p></blockquote></li>
<li><p>写给大忙人看的Java SE 8</p>

<blockquote><p>浅显易懂地对JDK 7和8新特性的概括，很薄的书，很快就能够看完，做到对Java新版本特性的了解。</p></blockquote></li>
<li><p>快学Scala</p>

<blockquote><p>Scala这个编程语言的学习曲线很陡，之前找到twitter的scala school，但是发现讲的有点不到位。此书作为Scale学习的入门书籍值得阅读。</p></blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年读过的书]]></title>
    <link href="http://www.rowkey.me/blog/2015/11/20/2015books/"/>
    <updated>2015-11-20T09:13:46+00:00</updated>
    <id>http://www.rowkey.me/blog/2015/11/20/2015books</id>
    <content type="html"><![CDATA[<h2>技术</h2>

<h3>1. 精益数据分析</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/26278639/">http://book.douban.com/subject/26278639/</a></li>
<li>说明：一本讲述数据驱动创业的书籍，比如在你的产品中如何区分虚荣指标，如何抓住关键指标等。对于每一个商业模式都有其特定的关键指标和底线。而且对于一个公司的几个阶段（移情、黏性、病毒性、营收、规模化）指标也不是相同的。商业模式+阶段决定了你需要关注的指标。</li>
<li>进度：100%</li>
</ul>


<h3>2. 推荐系统实践</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/10769749/">http://book.douban.com/subject/10769749/</a></li>
<li>说明：讲述了构建一个推荐系统的基本知识、算法以及架构等。基本涵盖了能实现一个基本的推荐系统所需的相关技术等。看完这本书，基本能对推荐系统入门。</li>
<li>进度：100%</li>
<li>备注：此书上大学时曾经看过，但当时由于没有实战环境，所以没啥印象。此次阅读是基于项目需要，但其中部分牵扯到具体算法的部分没有细看</li>
</ul>


<!--more-->


<h2>非技术</h2>

<h3>1. 他来了，请闭眼</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/25912734/">http://book.douban.com/subject/25912734/</a></li>
<li>说明：犯罪心理学&hellip;</li>
<li>进度：100%</li>
<li>备注：看了电视剧，不过瘾，就直接找书来看了</li>
</ul>


<h3>2. 三体</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/2567698/">http://book.douban.com/subject/2567698/</a></li>
<li>说明：不用多说了，今年最火的小说。一共有三部</li>
<li>进度：30%</li>
<li>备注：看到了第二部《黑暗森林》，然后一直没时间看后面了..</li>
</ul>


<h3>3. 藏地密码</h3>

<ul>
<li>豆瓣：<a href="http://book.douban.com/subject/2201813/">http://book.douban.com/subject/2201813/</a></li>
<li>说明：一共有十部，讲述了一群人为了一个共同的秘密，在藏地进行探险的故事。</li>
<li>进度：100%</li>
<li>备注：继鬼吹灯、盗墓笔记之后，又一部让我恨不得一口气看完的小说</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术的成长]]></title>
    <link href="http://www.rowkey.me/blog/2014/08/14/grow-up-in-tech/"/>
    <updated>2014-08-14T08:38:01+00:00</updated>
    <id>http://www.rowkey.me/blog/2014/08/14/grow-up-in-tech</id>
    <content type="html"><![CDATA[<p>最近因为一件事情，让自己突然对自己产生了巨大的怀疑。工作一年多，仔细想想貌似真的只是在积累项目经验，而在技术深度上却一直停滞不前。这其中确也有因为之前做产品没有太多空闲时间的缘故，但更多的还是自己一直不得章法。对nginx源码的学习，一拖再拖，想成为这方面的专家却也不知道努力挤出时间或者说没有好的方法让自己合理安排出时间。</p>

<p>毕业的时候自己选择这里，就是想安心的做技术，以求在技术上得到长足的进步。现在却发现在做着一些没那么有技术含量的东西，像某人所说：上学的时候给我一定的时间也能够做出来。虽然我觉得上学的时候，大部分进公司做的东西也能做出来（除非是那种需要基于一定的环境像大数据、高并发才能做的）。但其实我明白，那句话的意思主要强调的是应该潜心去研究一门技术，比如hadoop、storm等，成为一个领域的专家。这也的确是自己的软肋，也的确该好好加强。</p>

<!--more-->


<p>这也牵扯到了技术的广度和深度的问题。这两个的优先级不能一味的说谁优谁劣，技术研究的人肯定倾向于去拓展技术的深度，而面向产品、架构的人应该关心广度多一些吧。当然如果不去精通一门技术，广度却也是无法拓展的。所谓技术上的成长，抛开技术的深度和广度来言，我觉得还是主要指技术思维的拓展和进步。技术领域的很多东西都是触类旁通的，只要你有好的逻辑思维和方法论，那么对于很多东西都是能很快上手直至掌握、运用、精通的。</p>

<p>还有一个上手能力和学习能力的问题，上手能力指的是你掌握然后使用，而学习能力应该是理解并能改进。这两个概念以前没去区分过，现在想想却也是有很大不同的。上手容易，精通难。所谓学习能力，是上手之后能够快速地吸收为自己的东西，能够从自己的角度看待问题，甚至提出自己的改进。很多人接触一个新的技术的确能够很快地上手去运用，但是却很少会深入地去学习这种技术的原理、运行机制之类的东西。这也是优秀开发人员和一般开发人员本质的区别。
学习技术，更是要学习其精髓而非皮毛，知其然更要知其所以然。</p>

<p>其实，总结来看，作为一个技术人，追求的技术上的长进，从多个维度来看，关键的还是项目经验和思维能力的同步提高。当然，如果对某一个领域能深入研究从而成为专家那也是锦上添花的事情。</p>
]]></content>
  </entry>
  
</feed>
