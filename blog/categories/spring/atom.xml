<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spring | 后端技术杂谈]]></title>
  <link href="https://www.rowkey.cn/blog/categories/spring/atom.xml" rel="self"/>
  <link href="https://www.rowkey.cn/"/>
  <updated>2024-06-24T08:34:25+00:00</updated>
  <id>https://www.rowkey.cn/</id>
  <author>
    <name><![CDATA[MrRowKey]]></name>
    <email><![CDATA[superhj1987@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于SpringMVC中model的attribute无法指定别名的解决方案]]></title>
    <link href="https://www.rowkey.cn/blog/2015/01/21/springm-mvc-model-attribute-alias/"/>
    <updated>2015-01-21T12:00:00+08:00</updated>
    <id>https://www.rowkey.cn/blog/2015/01/21/springm-mvc-model-attribute-alias</id>
    <content type="html"><![CDATA[<p>最近由于项目需要，发现spring mvc在绑定参数时有这么一个缺陷。</p>

<p><strong>Url</strong>: <a href="http://localhost:8080/api/test?user_name=testUser">http://localhost:8080/api/test?user_name=testUser</a></p>

<p><strong>Controller</strong>:</p>

<pre>
@Controller
@RequestMapping("/api")
public class ApiController extends BaseController {

    @RequestMapping(value = "/test", headers = "Accept=application/json")
    public void authUser(ModelMap modelMap, Account acc) {
        ResultPack.packOk(modelMap);
    }
}

public class Account{
    private static final long serialVersionUID = 750752375611621980L;

    private long id;
    private String userName;
    private String password;
    private AccountType type = AccountType.ADMIN;
    private long timeTag;
    private int status = 1;
    ...
    ...
}
</pre>


<p>user_name无法映射到acc的userName上。如果使用json的方式，可以使用JsonProperty注解来解决。否则，spring貌似没提供解决方案。</p>

<p>于是追踪了一下spring mvc的源代码，发现可以通过重写ServletModelAttributeMethodProcessor来支持这个功能。</p>

<p><strong>Github</strong>:  <a href="https://github.com/superhj1987/spring-mvc-model-attribute-alias">https://github.com/superhj1987/spring-mvc-model-attribute-alias</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpringMVC的controller传递HttpServletResponse参数的那点事]]></title>
    <link href="https://www.rowkey.cn/blog/2014/12/09/spring-mvc-httpservletresponse/"/>
    <updated>2014-12-09T10:05:41+08:00</updated>
    <id>https://www.rowkey.cn/blog/2014/12/09/spring-mvc-httpservletresponse</id>
    <content type="html"><![CDATA[<pre>
    @RequestMapping(value = "cardDown", method = RequestMethod.GET, headers = "Accept=text/html")
    public void cardDown(ModelMap modelMap, HttpServletRequest request, HttpServletResponse response, String id, int status){
    ......
    }
</pre>


<p>之前在使用Spring mvc的时候发现这么一回事：在spring mvc的controller的参数里如果有HttpServletResponse(类似上面的代码),那么必须有返回值框架才会去在执行完handler后去搜索相应的viewResolver和view从而展现数据。如果没有返回值，那么默认就是返回null的。我初步推测框架的处理过程大致如此：如果controller参数里传递HttpServletResposne的话，框架就认为视图由handler自己生成可以不参于这个过程,但是如果handler有返回值的话，那么仍然认为还需要参与到视图生成的过程中。</p>

<!--more-->


<p>翻了一下spring mvc的代码，验证了自己的想法。在DispatchServlet的921行</p>

<pre>
// Actually invoke the handler.
mv = ha.handle(processedRequest, response, mappedHandler.getHandler());
</pre>


<p>这里的mv就是视图生成的结果。接着经历下面的过程：</p>

<ol>
<li>AbstractHandlerMethodAdapter.handle</li>
<li>RequestMappingHandlerAdapter.handleInternal</li>
<li><p>RequestMappingHandlerAdapter.invokeHandleMethod</p>

<p> 这地方有一个关键的变量mavContainer
 <pre>
 ModelAndViewContainer mavContainer = new ModelAndViewContainer();
 </pre>
 mavContainer有一个属性requestHandled，其标志着此次请求是否是由handler自己控制的。默认为false。</p></li>
<li><p>ServletInvocableHandlerMethod.invokeAndHandle</p></li>
<li>InvocableHandlerMethod.invokeForRequest</li>
<li><p>InvocableHandlerMethod.getMethodArgumentValues</p>

<p> 这个方法的功能在名字上大体就能看出来：获取controller中每一个参数的值。关键的地方在于
 <pre>
 args[i] = argumentResolvers.resolveArgument(parameter, mavContainer, request, dataBinderFactory);
 </pre>
 这一行代码关联的是对每一中paramerter的处理类。接下来的调用见7</p></li>
<li><p>HandlerMethodArgumentResolverComposite.resolveArgument</p>

<p> <pre>
 HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);
 Assert.notNull(resolver, &ldquo;Unknown parameter type [&rdquo; + parameter.getParameterType().getName() + &ldquo;]&rdquo;);
 return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);
 </pre></p>

<p> 这里的代码就三行，第一步是根据参数不同，获取不同的argumentResolver。当参数为HttpServletResponse的时候，就会调用ServletResponseMethodArgumentResolver.resolveArgument</p></li>
<li><p>ServletResponseMethodArgumentResolver.resolveArgument</p>

<p> 最核心的一段代码来了</p>

<p> <pre>
 if (mavContainer != null) {
     mavContainer.setRequestHandled(true);
 }
 </pre></p>

<p> 这里就把mavContainer的requestHandled设置为了true.</p></li>
<li><p>回到4，调用完InvocableHandlerMethod.invokeForRequest</p>

<p> <pre>
 if (returnValue == null) {
     if (isRequestNotModified(webRequest) || hasResponseStatus() || mavContainer.isRequestHandled()) {
         mavContainer.setRequestHandled(true);
         return;
     }
 }else if (StringUtils.hasText(this.responseReason)) {
     mavContainer.setRequestHandled(true);
     return;
 }</p>

<p> mavContainer.setRequestHandled(false);
 </pre></p>

<p> 当handler的返回值为null的时候，直接返回。否则将mavContainer的requestHandled设置为false。</p></li>
<li><p>接着回到3，调用完ServletInvocableHandlerMethod.invokeAndHandle后，接着调用getModelAndView(mavContainer, modelFactory, webRequest)</p></li>
<li><p>ServletInvocableHandlerMethod.getModelAndView</p>

<pre>
modelFactory.updateModel(webRequest, mavContainer);

if (mavContainer.isRequestHandled()) {
    return null;
}
</pre>


<p>这里当mavContainer的requestHandled被设置为true时,视图返回null。</p></li>
</ol>


<p>整个大体的流程就是这样的，如果需要使用HttpServletResponse同时还需要框架控制视图生成的话，可以给controller method一个返回值（随便什么都行）。</p>
]]></content>
  </entry>
  
</feed>
